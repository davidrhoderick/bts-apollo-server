/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/jobs": {
    /** Search jobs and get list of job */
    get: operations["searchJobs"];
    parameters: {
      query: {
        /** Identifies the type of job to be searched */
        jobType: parameters["jobType"];
        /** The identifier for the start date for comparison */
        searchDateIntervalStart: parameters["searchDateIntervalStart"];
        /** The identifier for the end date for comparison */
        searchDateIntervalEnd: parameters["searchDateIntervalEnd"];
      };
    };
  };
  "/jobs/activities/{activityId}/complete": {
    /** Mark a single Activity as complete */
    post: operations["completeActivity"];
    parameters: {
      path: {
        /** The identifier for the activity */
        activityId: parameters["activityId"];
      };
    };
  };
  "/jobs/lines/GL7Line/reference-data/governing-class-codes": {
    /** Retrieve GL7 Governing Class Codes */
    get: operations["retrieveGL7GoverningClassCodesByCriteria"];
    parameters: {
      query: {
        /** Product offering utilized as criteria to retrieve class codes */
        productOffering?: parameters["productOffering"];
        /** Subline utilized as criteria to retrieve class codes */
        subline?: parameters["subline"];
      };
    };
  };
  "/jobs/lines/WCMLine/reference-data/classcodes": {
    /** Return the Jurisdiction-level ClassCodes */
    get: operations["retrieveWCMClassCodesNoJobNumber"];
    parameters: {
      query: {
        /** jobDate */
        jobDate: parameters["jobDate"];
        /** Jurisdiction */
        jurisdiction: parameters["jurisdiction"];
        /** GoverningLaw */
        governingLaw: parameters["governingLaw"];
        /** operatingUnit */
        operatingUnit?: parameters["operatingUnit"];
      };
    };
  };
  "/jobs/{jobNumber}": {
    /** Retrieve job */
    get: operations["retrieveJob"];
    /** Update job info */
    patch: operations["patchJobInfo"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/activities": {
    /** Retrieve all activites */
    get: operations["retrieveAllActivity"];
    /** Create New Activity for provided jo/activitiesb number */
    post: operations["createNewActivity"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Flag to indicate fetching activities related to referral */
        isReferral?: parameters["isReferral"];
      };
    };
  };
  "/jobs/{jobNumber}/activities/{activityId}": {
    /** Retrieve Single Activity */
    get: operations["retrieveActivity"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the activity */
        activityId: parameters["activityId"];
      };
    };
  };
  "/jobs/{jobNumber}/bind": {
    /** Bind a job */
    post: operations["bindJob"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/copy-submission": {
    /** Copy Submission */
    post: operations["copySubmission"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/decline": {
    /** Decline job */
    post: operations["declineJob"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/draft": {
    /** Edit a job */
    post: operations["draftJob"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/excludeLocations": {
    /** Create a new exclude location */
    post: operations["createExcludeLocations"];
    /** Update list of exclude locations */
    patch: operations["patchExcludeLocations"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/excludelocations/{locationId}": {
    /** Delete this Location from its schedule */
    delete: operations["deleteExcludeLocations"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the location */
        locationId: parameters["locationId"];
      };
    };
  };
  "/jobs/{jobNumber}/issue": {
    /** Issue a job */
    post: operations["issueJob"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line": {
    /** Retrieve CA7 Line */
    get: operations["retrieveCA7Line"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/StateCoverable": {
    /** Update a CA7 State Coverable */
    patch: operations["patchCA7StateCoverable"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/coverageSymbolGroups": {
    /** Retrieve CA7 Coverage Symbol Groups */
    get: operations["retrieveCA7CoverageSymbolGroups"];
    /** Update CA7 Coverage Symbol Groups */
    patch: operations["patchCA7CoverageSymbolGroups"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/drivers": {
    /** Retrieve CA7 Drivers */
    get: operations["retrieveCA7Drivers"];
    /** Create a CA7 Driver */
    post: operations["createCA7Driver"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/drivers/{driverId}": {
    /** Retrieve CA7 Driver By Id */
    get: operations["retrieveCA7DriverById"];
    /** Delete this CA7 Driver By Id */
    delete: operations["deleteCA7DriverById"];
    /** Update a CA7 Driver */
    patch: operations["patchCA7Driver"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the driver */
        driverId: parameters["driverId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/vehicle/additional-interest": {
    /** Retrieve CA7 Additional Interests */
    get: operations["retrieveCA7AdditionalInterests"];
    /** Creates an additional interest on a vehicle */
    post: operations["createCA7AdditionalInterests"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/vehicle/additional-interest/{additionalInterestId}": {
    /** Deletes an additional interest by ID */
    delete: operations["deleteCA7AdditionalInterestById"];
    /** Update CA7 Additional Interest */
    patch: operations["patchCA7AdditionalInterest"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/vehicles": {
    /** Retrieve CA7 Vehicles */
    get: operations["retrieveCA7Vehicles"];
    /** Create a CA7 Vehicle */
    post: operations["createCA7Vehicle"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Indicates whether or not metadata should be included in response */
        includeMeta?: parameters["includeMeta"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/vehicles/vin-lookup/{vin}": {
    /** Retrieve Vehicle Info by Vehicle Identification Number */
    get: operations["vehicleIdentificationNumberLookup"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** Vehicle Identification Number */
        vin: parameters["vin"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/vehicles/{vehicleId}": {
    /** Retrieve a CA7 Vehicle by Id */
    get: operations["retrieveCA7Vehicle"];
    /** Delete CA7 Vehicle */
    delete: operations["deleteCA7Vehicle"];
    /** Update a CA7 Vehicle */
    patch: operations["patchCA7Vehicle"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the vehicle */
        vehicleId: parameters["vehicleId"];
      };
      query: {
        /** The type of the vehicle */
        vehicleType: parameters["vehicleType"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CA7Line/vehicles/{vehicleId}/validate": {
    /** Validate a vehicle entity */
    get: operations["validateCA7Vehicle"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the vehicle */
        vehicleId: parameters["vehicleId"];
      };
      query: {
        /** The type of the vehicle */
        vehicleType: parameters["vehicleType"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line": {
    /** Retrieve CP7 Details */
    get: operations["retrieveCP7Details"];
    /** Update CP7 Details */
    patch: operations["updateCP7Details"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/additional-interest": {
    /** Retrieve all building additional interest */
    get: operations["retrieveCP7BuildingsAdditionalInterests"];
    /** Add an additional interest to buildings coverage schedule items */
    post: operations["addCP7BuildingsAdditionalInterest"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/additional-interest/{additionalInterestId}": {
    /** Remove Additional Interest */
    delete: operations["removeCP7BuildingAdditionalInterest"];
    parameters: {
      path: {
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/buildings": {
    /** Retrieve CP7 Buildings */
    get: operations["retrieveCP7BuildingList"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/buildings/{buildingId}": {
    /** Retrieve CP7 Building based on BuildingId */
    get: operations["retrieveCP7BuidlingData"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/buildings/{buildingId}/class-codes": {
    /** Retrieve CP7 Building Class Codes */
    get: operations["retrieveCP7ClassCodeDescriptions"];
    parameters: {
      path: {
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
      query: {
        /** A governing class code */
        governingClassCode?: parameters["governingClassCode"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/business-incomes": {
    /** Retrieve CP7 Business Income */
    get: operations["retrieveCP7BusinessIncomeList"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/business-incomes/{businessIncomeId}": {
    /** Retrieve CP7 Business Income based on BusinessIncomeId */
    get: operations["retrieveCP7BusinessIncomeData"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7 Business Income associated with CP7Building */
        businessIncomeId: parameters["businessIncomeId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations": {
    /** Retrieve a list of locations on a job */
    get: operations["retrieveCP7Locations"];
    /** Create a new cp7location on a job */
    post: operations["createCP7Location"];
    /** Update list of cp7location on a job */
    patch: operations["patchCP7PolicyLocations"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}": {
    /** Retrieve a CP7 location on a job */
    get: operations["retrieveCP7Location"];
    /** Delete this cp7location from its job */
    delete: operations["deleteCP7PolicyLocation"];
    /** Update a cp7location on a job */
    patch: operations["patchCP7PolicyLocation"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings": {
    /** Retrieve CP7 Buildings on a Location */
    get: operations["retrieveCP7Buildings"];
    /** Create CP7 Building on a Location */
    post: operations["createCP7Building"];
    /** Patch CP7 Buildings on a Location */
    patch: operations["patchCP7Buildings"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings/{buildingId}": {
    /** Retrieve a CP7 Building on a Building ID */
    get: operations["retrieveCP7Building"];
    /** Delete this CP7 Building from its Location */
    delete: operations["deleteCP7Building"];
    /** Patch CP7 Building on a Building ID */
    patch: operations["updateCP7Building"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings/{buildingId}/business-incomes": {
    /** Retrieve CP7 Business Income on a Building */
    get: operations["retrieveCP7BusinessIncomes"];
    /** Create CP7 Business Income on a Building */
    post: operations["createCP7BusinessIncome"];
    /** Patch CP7 Business Incomes on a Building */
    patch: operations["patchCP7BusinessIncome"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings/{buildingId}/business-incomes/{businessIncomeId}": {
    /** Retrieve a CP7 Business Income on a Building */
    get: operations["retrieveCP7BusinessIncome"];
    /** Delete this CP7 Business Income from Building */
    delete: operations["deleteCP7BusinessIncome"];
    /** Patch CP7 Business Income on a Building */
    patch: operations["updateCP7BusinessIncome"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7 Business Income associated with CP7Building */
        businessIncomeId: parameters["businessIncomeId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings/{buildingId}/occupancy-classes": {
    /** Retrieve CP7 OccupancyClass on a Building */
    get: operations["retrieveCP7OccupancyClasses"];
    /** Create CP7 OccupancyClass on a Building */
    post: operations["createCP7OccupancyClass"];
    /** Patch CP7 Occupancy Classes on a Building */
    patch: operations["patchCP7OccupancyClasses"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings/{buildingId}/occupancy-classes/{occupancyClassId}": {
    /** Retrieve a CP7 Building on a Building ID */
    get: operations["retrieveCP7OccupancyClass"];
    /** Delete this CP7 Occupancy Class from its Building */
    delete: operations["deleteCP7OccupancyClass"];
    /** Patch CP7 Occupancy on a Building ID */
    patch: operations["updateCP7OccupancyClass"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings/{buildingId}/occupancy-classes/{occupancyClassId}/personal-properties": {
    /** Retrieve CP7 Personal Property on a Occupancy */
    get: operations["retrieveCP7PersonalProperties"];
    /** Create CP7 Personal Property on a Occupancy */
    post: operations["createCP7PersonalProperty"];
    /** Patch CP7 Personal Property on a Occupancy */
    patch: operations["patchCP7PersonalProperties"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/buildings/{buildingId}/occupancy-classes/{occupancyClassId}/personal-properties/{personalPropertyId}": {
    /** Retrieve a CP7 Personal Property on a Occupancy */
    get: operations["retrieveCP7PersonalProperty"];
    /** Delete this CP7 Personal Property on a Occupancy */
    delete: operations["deleteCP7PersonalProperty"];
    /** Patch CP7 Personal Property on a Occupancy */
    patch: operations["updateCP7PersonalProperty"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
        /** The identifier for the CP7 Personal Property associated with CP7OccupancyClass */
        personalPropertyId: parameters["personalPropertyId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/special-classes": {
    /** Retrieve CP7 Special Classes on a Location */
    get: operations["retrieveCP7SpecialClasses"];
    /** Create CP7 Special Class on a Location */
    post: operations["createCP7SpecialClass"];
    /** Patch CP7 Special Classes on a Location */
    patch: operations["patchCP7SpecialClasses"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/special-classes/{specialClassId}": {
    /** Retrieve a CP7 Special Class with a Special Class ID */
    get: operations["retrieveCP7SpecialClass"];
    /** Delete this CP7 Special Class from its Location */
    delete: operations["deleteCP7SpecialClass"];
    /** Patch CP7 Special Class with a Special Class Id */
    patch: operations["patchCP7SpecialClass"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/special-classes/{specialClassId}/special-class-business-incomes": {
    /** Retrieve Special Class Business Incomes on a Special Class */
    get: operations["retrieveCP7SpecialClassBIs"];
    /** Create CP7 Special Class Business Incomes on a Special Class */
    post: operations["createCP7SpecialClassBI"];
    /** Patch CP7 Special Class Business Income on a Special Class */
    patch: operations["patchCP7SpecialClassBIs"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/locations/{cp7LocationId}/special-classes/{specialClassId}/special-class-business-incomes/{specialClassBusinessIncomeId}": {
    /** Retrieve a CP7 Special Class with a SpecialClassBusinessIncomeID */
    get: operations["retrieveCP7SpecialClassBI"];
    /** Delete this CP7 Special Class Business Income from its Special Class */
    delete: operations["deleteCP7SpecialClassBI"];
    /** Patch CP7 Special Class Business Income with a SpecialClassBusinessIncomeId */
    patch: operations["patchCP7SpecialClassBI"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
        /** The identifier for CP7 Special Class Business Income */
        specialClassBusinessIncomeId: parameters["specialClassBusinessIncomeId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/occupancy-classes": {
    /** Retrieve CP7 OccupancyClasses */
    get: operations["retrieveCP7OccupancyClassList"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/occupancy-classes/{occupancyClassId}": {
    /** Retrieve CP7 OccupancyClass based on OccupancyClassId */
    get: operations["retrieveCP7OccupancyClassData"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/occupancy-classes/{occupancyClassId}/class-codes": {
    /** Retrieve CP7 OccupancyClass Class Codes */
    get: operations["retrieveCP7OccupancyClassCodeDescriptions"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/personal-properties": {
    /** Retrieve CP7 Personal Properties */
    get: operations["retrieveCP7PersonalPropertyList"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/personal-properties/{personalPropertyId}": {
    /** Retrieve a CP7 Personal Property based on PersonalPropertyId */
    get: operations["retrieveCP7PersonalPropertyData"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7 Personal Property associated with CP7OccupancyClass */
        personalPropertyId: parameters["personalPropertyId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/reference-data/governing-class-codes": {
    /** Retrieve CP7 Governing Class Codes */
    get: operations["retrieveCP7GoverningClassCodes"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/special-class-business-incomes": {
    /** Retrieve Special Class Business Incomes */
    get: operations["retrieveCP7SpecialClassBIList"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/special-class-business-incomes/{specialClassBusinessIncomeId}": {
    /** Retrieve a CP7 Special Class with a SpecialClassBusinessIncomeID */
    get: operations["retrieveCP7SpecialClassBIData"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for CP7 Special Class Business Income */
        specialClassBusinessIncomeId: parameters["specialClassBusinessIncomeId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/special-classes": {
    /** Retrieve CP7 Special Classes */
    get: operations["retrieveCP7SpecialClassList"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/special-classes/{specialClassId}": {
    /** Retrieve a CP7 Special Class with a Special Class ID */
    get: operations["retrieveCP7SpecialClassData"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/CP7Line/special-classes/{specialClassId}/class-codes": {
    /** Retrieve CP7 Special Class Class Codes */
    get: operations["retrieveCP7SpecialClassCodeDescriptions"];
    parameters: {
      path: {
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line": {
    /** Retrieve GL7 Line */
    get: operations["retrieveGL7Line"];
    /** Update GL7 Line */
    patch: operations["updateGL7Line"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/exposures": {
    /** Retrieve GL7 Exposures Details */
    get: operations["retrieveGL7Exposures"];
    /** Create a new gl7Exposure on a job */
    post: operations["createGL7Exposure"];
    /** Update list of gl7Exposues on a job */
    patch: operations["patchGL7Exposures"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/exposures/{exposureId}": {
    /** Retrieve GL7 Exposures Details */
    get: operations["retrieveGL7Exposure"];
    /** Delete this gl7exposure from its job */
    delete: operations["deleteGL7Exposure"];
    /** Update Sub-line Details */
    patch: operations["patchGL7Exposure"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the expousre associated with GL7Location */
        exposureId: parameters["exposureId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/exposures/{exposureId}/meta": {
    /** Retrieve a single GL7 Exposure by id with Metadata */
    get: operations["retrieveGL7ExposureMetadata"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the expousre associated with GL7Location */
        exposureId: parameters["exposureId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/locations": {
    /** Retrieve a list of locations on a job */
    get: operations["retrieveGL7Locations"];
    /** Create a new gl7location on a job */
    post: operations["createGL7Location"];
    /** Update list of gl7location on a job */
    patch: operations["patchGL7PolicyLocations"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/locations/{gl7LocationId}": {
    /** Retrieve a list of GL7 location on a job */
    get: operations["retrieveGL7Location"];
    /** Delete this gl7location from its job */
    delete: operations["deleteGL7PolicyLocation"];
    /** Update a gl7location on a job */
    patch: operations["patchGL7PolicyLocation"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        gl7LocationId: parameters["gl7LocationId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/locations/{gl7LocationId}/meta": {
    /** Retrieve a list of GL7 location on a job */
    get: operations["retrieveGL7LocationMetadata"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        gl7LocationId: parameters["gl7LocationId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/reference-data/classcodes": {
    /** Return the exposure-level ClassCodes */
    get: operations["getClassCodes"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/reference-data/governing-class-codes": {
    /** Retrieve GL7 Governing Class Codes */
    get: operations["retrieveGL7GoverningClassCodes"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/subline-selections": {
    /** Retrieve Sub-line Selection */
    get: operations["retrieveSubLineSelection"];
    /** Update Sub-line Selection */
    patch: operations["updateSubLineSelection"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/subline-types": {
    /** Retrieve GL7 Subline Details */
    get: operations["getGL7SubLineDetails"];
    /** Update a gl7SubLineDetails on a job */
    patch: operations["updateGL7SubLineDetails"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/GL7Line/sublines": {
    /** Retrieve Sub-line Details */
    get: operations["retrieveSublines"];
    /** Update Sub-line Details */
    patch: operations["updateSublines"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine": {
    /** Return the WCM Line Details */
    get: operations["getWCMLineDetails"];
    /** Update a list of answers to the questions on a job */
    patch: operations["patchWCMLineDetails"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/WCMLocations": {
    /** Retrieve a list of locations on a job */
    get: operations["retrieveWCMLocations"];
    /** Create a new location on a job */
    post: operations["createWCMLocations"];
    /** Delete list of location on a job */
    delete: operations["deleteWCMLocations"];
    /** Update list of location on a job */
    patch: operations["patchWCMLocations"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** The identifier for sync coverages */
        syncCoverages?: parameters["syncCoverages"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/WCMLocations/{locationId}": {
    /** Delete this location from its job */
    delete: operations["deleteWCMPolicyLocation"];
    /** Update a location on a job */
    patch: operations["patchWCMPolicyLocation"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the location */
        locationId: parameters["locationId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/jurisdictions": {
    /** Retrieve All Jurisdiction Coverages */
    get: operations["getAllJurisdictions"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/jurisdictions/{state}/coverages": {
    /** Retrieve coverages based on state */
    get: operations["getJurisdiction"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the state */
        state: parameters["state"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/owners-and-officers": {
    /** Retrieve Owner Officers */
    get: operations["retrieveOwnerOfficers"];
    /** Create Owner Officer for provided job number */
    post: operations["createOwnerOfficer"];
    /** Update Owner Officers for provided job number */
    patch: operations["patchOwnerOfficers"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/owners-and-officers/{ownerOfficerId}": {
    /** Delete this owner officer from its job */
    delete: operations["deleteOwnerOfficer"];
    /** Update Owner Officer for provided job number */
    patch: operations["patchOwnerOfficer"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the owner officer */
        ownerOfficerId: parameters["ownerOfficerId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/reference-data/classcodes": {
    /** Return the Jurisdiction-level ClassCodes */
    get: operations["retrieveWCMClassCodes"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Jurisdiction */
        jurisdiction: parameters["jurisdiction"];
        /** GoverningLaw */
        governingLaw: parameters["governingLaw"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/reference-data/employer-liability-limits": {
    /** Return all the limts */
    get: operations["getLineCoverageLimits"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCMLine/sync-coverages": {
    /** Sync all coverages */
    post: operations["syncProductModel"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCULine/underlying-policy": {
    /** Get all underlying policies */
    get: operations["getUnderlyingPolicies"];
    /** Add underlying policy to WCULine */
    post: operations["validateAndAddUnderlyingPolicy"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WCULine/underlying-policy/{underlyingPolicyId}": {
    /** Remove underlying policy from WCULine */
    delete: operations["removeUnderlyingPolicy"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the underlying policy */
        underlyingPolicyId: parameters["underlyingPolicyId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WIMLine": {
    /** Retrieve WIM Line */
    get: operations["retrieveWIMLine"];
    /** Update WIM Line */
    patch: operations["updateWIMLine"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WIMLine/coverage-parts": {
    /** Retrieve WIM Coverage Parts */
    get: operations["retrieveCoverageParts"];
    /** Create WIM Coverage Part on WIM Line */
    post: operations["createCoveragePart"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WIMLine/coverage-parts/{coveragePartId}": {
    /** Retrieve WIM Coverage Part by ID */
    get: operations["retrieveCoveragePart"];
    /** Delete WIM Coverage Part by ID */
    delete: operations["deleteCoveragePart"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WIMLine/coverage-parts/{coveragePartId}/scheduled-equipments": {
    /** Retrieve WIM Scheduled Equipments by Coverage Part ID */
    get: operations["retrieveScheduledEquipments"];
    /** This endpoint facilitates creating new scheduled equipments to an existing coverage part */
    post: operations["createScheduledEquipment"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WIMLine/coverage-parts/{coveragePartId}/scheduled-equipments/{equipmentId}": {
    /** Retrieve WIM Scheduled Equipments by Equipment ID */
    get: operations["retrieveScheduledEquipment"];
    /** Delete WIM Scheduled Equipment */
    delete: operations["deleteScheduledEquipment"];
    /** Update a WIM Scheduled Equipment on coverage part */
    patch: operations["patchScheduledEquipment"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WIMLine/coverage-parts/{coveragePartId}/scheduled-equipments/{equipmentId}/additional-interest": {
    /** Retrieve WIM Additional Interest Details for Scheduled Equipment */
    get: operations["retrieveAdditionalInterests"];
    /** This endpoint facilitates creating new additional interests to an existing scheduled equipment */
    post: operations["createAdditionalInterest"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
      };
    };
  };
  "/jobs/{jobNumber}/lines/WIMLine/coverage-parts/{coveragePartId}/scheduled-equipments/{equipmentId}/additional-interest/{additionalInterestId}": {
    /** Retrieve WIM Additional Interest Detail for Scheduled Equipment by ID */
    get: operations["retrieveAdditionalInterest"];
    /** Delete WIM Additional Interest Detail */
    delete: operations["deleteAdditionalInterest"];
    /** Update WIM Additional Interest Detail */
    patch: operations["patchAdditionalInterest"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
    };
  };
  "/jobs/{jobNumber}/locations": {
    /** Get Policy Locations from its job */
    get: operations["retrievePolicyLocations"];
    /** Create Policy Location for provided job number */
    post: operations["createPolicyLocation"];
    /** Update Prior Policy for provided job number */
    patch: operations["patchPolicyLocations"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/locations/{policyLocationId}": {
    /** Get Policy Locations from its job */
    get: operations["retrievePolicyLocation"];
    /** Delete this Policy Location from its job */
    delete: operations["deletePolicyLocation"];
    /** Update Policy Location for provided job number */
    patch: operations["patchPolicyLocation"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        policyLocationId: parameters["policyLocationId"];
      };
    };
  };
  "/jobs/{jobNumber}/payment": {
    /** Retrieve payment plans for the job */
    get: operations["retrievePaymentPlans"];
    /** Add/Update Payment Plan for provided job number */
    patch: operations["patchPaymentPlan"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/prior-policies": {
    /** Get  priorpolicy from its job */
    get: operations["retrievePriorPolicies"];
    /** Create Prior Policy for provided job number */
    post: operations["createPriorPolicy"];
    /** Update Prior Policy for provided job number */
    patch: operations["patchPriorPolicies"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/prior-policies/{priorPolicyId}": {
    /** Delete this priorpolicy from its job */
    delete: operations["deletePriorPolicy"];
    /** Update Prior Policy for provided job number */
    patch: operations["patchPriorPolicy"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the job */
        priorPolicyId: parameters["priorPolicyId"];
      };
    };
  };
  "/jobs/{jobNumber}/prior-policy/carriers": {
    /** Retrieve carriers */
    get: operations["retrievePriorPolicyCarriers"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/quote": {
    /** Quote a job */
    post: operations["quoteJob"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Flag to indicate whether or not quote should wait for docs before returning */
        withDocs?: parameters["withDocs"];
      };
    };
  };
  "/jobs/{jobNumber}/rate": {
    /** Rate a job */
    post: operations["rateJob"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/jobs/{jobNumber}/reference-data/industry-codes": {
    /** Retrieve a list of industry codes */
    get: operations["retrieveIndustryCodes"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Query parameter to pass industry code domain */
        industryCodeDomain?: parameters["industryCodeDomain"];
      };
    };
  };
  "/jobs/{jobNumber}/reference-data/policy-symbols": {
    /** Retrieve policy symbols for the job */
    get: operations["retrievePolicySymbols"];
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
  };
  "/submissions": {
    /** Create a new draft submission */
    post: operations["createSubmission"];
  };
  "/swagger.json": {
    /** Returns a Swagger 2.0 schema for this API as json */
    get: operations["generateDocs"];
  };
}

export interface definitions {
  ActivitiesResponse: {
    data?: definitions["Activity"][];
    meta?: definitions["ResponseMeta"];
  };
  Activity: {
    activityPattern?: string;
    assignTo?: string;
    author?: string;
    authorRole?: string;
    /** Format: date */
    dueDate?: string;
    /** Format: date */
    escalationDate?: string;
    id?: string;
    mandatory?: boolean;
    note?: definitions["Note"];
    priority?: string;
    subject?: string;
  };
  ActivityRequest: {
    data?: definitions["Activity"];
    meta?: definitions["RequestMeta"];
  };
  ActivityResponse: {
    data?: definitions["Activity"];
    meta?: definitions["ResponseMeta"];
  };
  Note: {
    /** Format: date-time */
    createTime?: string;
    securityLevel?: string;
    text?: string;
  };
  /** @description Response for getTypeLists */
  AllTypeListsResponse: {
    /** @description Array of the typeLists */
    data?: definitions["TypeList"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Response for getAvailableStates */
  AvailableStatesResponse: {
    /** @description Available states as array of the typeKeys */
    data?: definitions["TypeKey"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Category with code, typeList */
  Category: {
    /** @description Category code to be as the internal identifier */
    code?: string;
    /** @description TypeList name to be displayed on the user interface */
    typeList?: string;
  };
  /** @description Include with code */
  Include: {
    /** @description Include code to be as the internal identifier */
    code?: string;
  };
  MonetaryAmount: {
    /** Format: gw-bigdecimal */
    amount?: string;
    currency?: string;
  };
  /** @description Response for getNCCIStates */
  NCCIStatesResponse: {
    /** @description NCCI states as array of the typeKeys */
    data?: definitions["TypeKey"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description List of productProperties and productValidation */
  ProductInfo: {
    id?: string;
    name?: string;
    productProperties?: definitions["LOBProperty"][];
    productValidation?: definitions["LOBPropertiesInfo"];
  };
  /** @description Meta object in the Request */
  RequestMeta: {
    /** @description Consumer or caller application name */
    application?: string;
  };
  /** @description Meta object in the Response */
  ResponseMeta: {
    /**
     * Format: date-time
     * @description API processed date and time
     */
    processedTime?: string;
    productInfo?: definitions["ProductInfo"];
  };
  /** @description Meta object in the Response */
  ResponsesMeta: {
    /**
     * Format: date-time
     * @description API processed date and time
     */
    processedTime?: string;
    /** @description Array of the LobProperties */
    productInfo?: definitions["ProductInfo"][];
  };
  /** @description Guidewire TypeFilter with code */
  TypeFilter: {
    /** @description Array of the excludes */
    excludes?: definitions["Include"][];
    /** @description Array of the includes */
    includes?: definitions["Include"][];
    /** @description TypeFilter name to be displayed on the user interface */
    name?: string;
  };
  /** @description Guidewire TypeKey with code, displayname and etc */
  TypeKey: {
    /** @description Categories as array of the categories */
    categories?: definitions["Category"][];
    /** @description TypeKey code to be as the internal identifier */
    code?: string;
    /** @description TypeKey displayName to be displayed on the user interface */
    displayName?: string;
    /** @description TypeKey priority can be used as sort or display order */
    priority?: number;
  };
  /** @description Guidewire TypeList with displayName, typeKeys and etc */
  TypeList: {
    /** @description TypeList displayName to be displayed on the user interface */
    name?: string;
    /** @description Array of the typeFilters */
    typeFilters?: definitions["TypeFilter"][];
    /** @description Array of the typeKeys */
    typeKeys?: definitions["TypeKey"][];
  };
  /** @description Response for getTypeList */
  TypeListResponse: {
    data?: definitions["TypeList"];
    meta?: definitions["ResponseMeta"];
  };
  LOBPropertiesInfo: {
    missingProperties?: string[];
    status?: string;
  };
  LOBProperty: {
    available?: boolean;
    dataType?: string;
    defaultValue?: string;
    dependents?: string[];
    editable?: boolean;
    forceRefresh?: boolean;
    hasDependents?: boolean;
    id?: string;
    label?: string;
    name: string;
    needsRefresh?: boolean;
    options?: string[];
    required?: boolean;
    selectedValue: string;
    visible?: boolean;
    widgetType?: string;
  };
  BindAndIssue: {
    organizationId?: number;
    userEmail?: string;
    userFirstName?: string;
    userLastName?: string;
  };
  /** @description Request to Issue a Policy */
  IssueRequest: {
    data?: definitions["BindAndIssue"];
    meta?: definitions["RequestMeta"];
  };
  CA7AdditionalInterest: {
    additionalInterestType: string;
    contact: definitions["Contact"];
    id?: string;
    scheduledItemId?: string;
    vehicle?: definitions["CA7Vehicle"];
  };
  CA7AdditionalInterestRequest: {
    data?: definitions["CA7AdditionalInterestRequestData"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Request Data to Add CA7AdditionalInterests */
  CA7AdditionalInterestRequestData: {
    accountContactId?: string;
    contact?: definitions["Contact"];
    vehicleInterests?: definitions["CA7VehicleInterest"][];
  };
  CA7AdditionalInterestResponse: {
    data?: definitions["CA7AdditionalInterest"];
    meta?: definitions["ResponseMeta"];
  };
  CA7AdditionalInterestsResponse: {
    data?: definitions["CA7AdditionalInterest"][];
    meta?: definitions["ResponseMeta"];
  };
  CA7VehicleInterest: {
    additionalInterestType?: string;
    coveragePatternCode?: string;
    interestDescription?: string;
    loanNumber?: string;
    vehicleId?: string;
    vehicleType?: string;
  };
  /** @description Details for Contact */
  Contact: {
    accountContactRoleType?: string;
    accountOrgType?: string;
    aliasName?: string;
    businessWebsite?: string;
    companyName?: string;
    contactRoleType?: string;
    contactType: string;
    descOfOperations?: string;
    fein?: string;
    firstName?: string;
    id?: string;
    lastName?: string;
    legacyCustomerNumber?: string;
    middleName?: string;
    noEmailAddressAvailable?: boolean;
    primaryAddress: definitions["Location"];
    primaryDBAName?: string;
    primaryEmail?: string;
    primaryPhone?: string;
    primaryPhoneType?: string;
    secondaryEmail?: string;
  };
  ContactRequest: {
    data?: definitions["Contact"];
    meta?: definitions["RequestMeta"];
  };
  ContactResponse: {
    data?: definitions["Contact"];
    meta?: definitions["ResponseMeta"];
  };
  ContactsRequest: {
    data?: definitions["Contact"][];
    meta?: definitions["RequestMeta"];
  };
  ContactsResponse: {
    data?: definitions["Contact"][];
    meta?: definitions["ResponseMeta"];
  };
  ProducerContact: {
    firstName?: string;
    lastName?: string;
    producerAddress?: definitions["Location"];
    producerEmail?: string;
    producerPhone?: string;
  };
  Location: {
    addressLine1: string;
    addressLine2?: string;
    addressType: string;
    city: string;
    country?: string;
    county?: string;
    postalCode: string;
    state: string;
  };
  /** @description Details of a CA7 Vehicle */
  CA7Vehicle: {
    accidentPreventionDiscount?: string;
    agreedValue?: number;
    agreedValueApplies?: string;
    autoHackingExpenseCoverage?: string;
    autoRentedToOtherMotorCarriers?: string;
    autosFurnishedForRegularUse?: string;
    auxillaryRunningLampsDiscount?: string;
    bodyType?: string;
    businessUseClass?: string;
    classCode?: string;
    clazz?: string;
    displayName?: string;
    engineSize?: string;
    farmersLimitedRegistrationPlates?: string;
    farthestTerminalZone?: string;
    fleet?: string;
    franchisedAndNonFranchisedDealerClassification?: string;
    garagingLocation?: definitions["PolicyLocation"];
    garagingZone?: string;
    greenZoneDiscountApplies?: string;
    grossCombinedWeight?: number;
    grossReceipts?: number;
    grossVehicleWeight?: number;
    id?: string;
    interimClassCode?: string;
    inventoryValue?: number;
    leaseOrRent?: boolean;
    lengthOfLease?: string;
    lessorAnEmployee?: boolean;
    lightMediumTruck?: string;
    make?: string;
    mechanicalLift?: string;
    model?: string;
    /** @description Name and value pairs to dynamically update the vehicle */
    nameValueProps?: definitions["NameValueProp"][];
    nonOwnedAutosDriverTraining?: string;
    numberOfDaysSchoolYear?: number;
    numberOfDaysVehicleIsLeased?: number;
    numberOfFactoryTestingEmployees?: number;
    numberOfPoweredVehiclesForRating?: number;
    numberOfRepossessedAutos?: number;
    operatorExperience?: string;
    originalCostNew?: number;
    originalCostNewOfChassis?: number;
    percentageOfTransportationNetworkServiceAutoUse?: string;
    primaryClassCode?: string;
    product?: definitions["Product"];
    radiusClass?: string;
    ransomCoverage?: string;
    replacementCostCoverage?: string;
    safetyScore?: string;
    safetyScoreDiscountApplies?: string;
    schoolBusProration?: string;
    seatingCapacity?: string;
    secondaryClass?: string;
    secondaryClassCode?: string;
    selfPropelledVehicle?: string;
    sizeClass?: string;
    statedAmount?: number;
    supplementaryType?: string;
    territory?: string;
    totalCostOfHireLiabilityInsuredPrimary?: number;
    totalCostOfHireLiabilityOwnerPrimary?: number;
    trailerHowUsed?: string;
    type?: string;
    use?: string;
    usedAsTNCOrOnDemand?: string;
    vehicleIsOwnedOrLeased?: string;
    vehicleType: string;
    vin?: string;
    vinOverride?: boolean;
    withHoldHarmlessAgreement?: string;
    year?: number;
    zipCode?: string;
    zipCodeOverride?: string;
  };
  /** @description Vehicle Info */
  CA7VehicleInfo: {
    correctedVin?: string;
    grossCombinedWeight?: number;
    grossVehicleWeight?: number;
    make?: string;
    model?: string;
    originalCostNew?: number;
    validationMessage?: string;
    vin?: string;
    year?: number;
  };
  /** @description Request for CA7 Vehicle */
  CA7VehicleRequest: {
    data?: definitions["CA7Vehicle"];
    meta?: definitions["RequestMeta"];
  };
  CA7VehicleResponse: {
    data?: definitions["CA7Vehicle"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Response for CA7 Vehicles */
  CA7VehiclesResponse: {
    /** @description An array of CA7 Vehicles */
    data?: definitions["CA7Vehicle"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Name and Value pair for vehicle dynamic updates */
  NameValueProp: {
    name?: string;
    value?: string;
  };
  /** @description Vehicle Info by Vehicle Identification Number */
  VehicleIdentificationNumberResponse: {
    data?: definitions["CA7VehicleInfo"];
  };
  /** @description Vehicle Validation Info */
  VehicleValidationInfo: {
    /** @description List of error messages if the vehicle is not valid */
    errorMessages?: string[];
    /** @description Indicates if the vehicle is valid */
    isValid: boolean;
  };
  /** @description Vehicle Validation Response */
  VehicleValidationResponse: {
    data?: definitions["VehicleValidationInfo"];
  };
  LocationResponseData: {
    id?: string;
    locationNumber?: string;
  };
  PolicyLocation: {
    addressLine1?: string;
    addressLine2?: string;
    addressType?: string;
    city?: string;
    county?: string;
    fullTimeEmployees?: number;
    id?: string;
    isPrimaryLocation?: boolean;
    latitude?: string;
    locationNumber?: number;
    longitude?: string;
    nonSpecific?: boolean;
    partTimeEmployees?: number;
    postalCode?: string;
    state: string;
  };
  /** @description Request for Create/Update New Location */
  PolicyLocationRequest: {
    data?: definitions["PolicyLocation"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update New Location */
  PolicyLocationResponse: {
    data?: definitions["PolicyLocation"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for Patch Locations */
  PolicyLocationsRequest: {
    /** @description Update array of locations */
    data?: definitions["PolicyLocation"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for getPolicyLocations */
  RetrievePolicyLocationsResponse: {
    /** @description Policy locations as array of the policyLocations */
    data?: definitions["PolicyLocation"][];
    meta?: definitions["ResponseMeta"];
  };
  CoverableCoverageIndicatorRequest: {
    coverablePublicId: string;
    coverableType: string;
    coverageIndicator: string;
    coverageIndicatorValue: string;
    garageLocationId?: string;
  };
  /** @description Request to patch jurisdiction with coverage */
  CoverableRequest: {
    data?: definitions["CoverableCoverageIndicatorRequest"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Request/Response for Coverable */
  Product: {
    abbreviation?: string;
    class?: string;
    displayName?: string;
    id?: string;
    /** @description Array of Policy Locations */
    locations?: definitions["policylocation_PolicyLocation"][];
    /** @description Array of Modifiables */
    modifiables?: definitions["Modifiable"][];
    patternCode?: string;
    /** @description Available coverages */
    policyLines?: definitions["PolicyLine"][];
    /** @description Array of QuestionSets */
    questionSets?: definitions["QuestionAnswerSet"][];
  };
  ProductCoveragesRequest: {
    meta?: definitions["RequestMeta"];
    operatingUnit: string;
    productCode: string;
  };
  /** @description Array of Coverage Patterns under Policy Line */
  ProductCoveragesResponse: {
    data?: definitions["Coverage"][];
  };
  /** @description Response for all Coverages in the producer */
  ProductRequest: {
    data?: definitions["Product"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for all Coverages in the producer */
  ProductResponse: {
    data?: definitions["Product"];
    meta?: definitions["ResponsesMeta"];
  };
  AdditionalRatingElements: {
    additionalRatingElements?: definitions["AdditionalRatingElementsFieldAvailabilities"][];
    jobNumber?: string;
  };
  AdditionalRatingElementsFieldAvailabilities: {
    additionalRatingElementsFieldAvailabilities?: string;
    jurisdiction?: string;
  };
  CovTermLimits: {
    /** Format: double */
    defaultValue?: number;
    id?: string;
    /** Format: double */
    maxValue?: number;
    /** Format: double */
    minValue?: number;
  };
  /** @description Request/Response for Coverable */
  Coverable: {
    class: string;
    /** @description Available conditions */
    conditions?: definitions["Coverage"][];
    coverableState?: string;
    /** @description Available coverages */
    coverages?: definitions["Coverage"][];
    displayName?: string;
    /** @description Available exclusion */
    exclusions?: definitions["Coverage"][];
    id: string;
    patternCode?: string;
    /** @description Array of Policy Locations */
    policyLocations?: definitions["policylocation_PolicyLocation"][];
    scheduleCoveragePattern?: string;
  };
  /** @description Response for all Coverables */
  CoverablesResponse: {
    /** @description Response for all Coverables */
    data?: definitions["Coverable"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request/Response for Coverage */
  Coverage: {
    categoryDisplayName?: string;
    categoryPatternCode?: string;
    class?: string;
    displayName?: string;
    existenceType?: string;
    id?: string;
    isComplete?: boolean;
    isSchedule?: boolean;
    isScheduledCoverableContainer?: boolean;
    patternCode: string;
    /** @description Available CoverageSchedule Items */
    scheduledItems?: definitions["CoverageSchedule"][];
    selected: boolean;
    /** @description Available Terms Items */
    terms?: definitions["Term"][];
  };
  /** @description Response for Coverage */
  CoverageResponse: {
    data?: definitions["Coverage"];
    meta?: definitions["ResponseMeta"];
  };
  CoverageSchedule: {
    /** @description Available CoverageScheduleInfo Items */
    coverageScheduleInfo?: definitions["CoverageScheduleInfo"][];
    id?: string;
  };
  CoverageScheduleInfo: {
    label: string;
    options?: definitions["CoverageScheduleInfoOption"][];
    propertyContactDisplayName?: string;
    propertyValue?: string;
    required?: boolean;
    valueType?: string;
  };
  CoverageScheduleInfoOption: {
    name?: string;
    value?: string;
  };
  /** @description Response for all Coverages */
  CoveragesResponse: {
    /** @description Response for all Coverage */
    data?: definitions["Coverage"][];
    meta?: definitions["ResponseMeta"];
  };
  Option: {
    class?: string;
    code?: string;
    displayName?: string;
    id?: string;
    patternCode?: string;
  };
  RatingElementsResponse: {
    data?: definitions["AdditionalRatingElements"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Coverage */
  SingleCoverageResponse: {
    data?: definitions["Coverage"];
    meta?: definitions["ResponseMeta"];
  };
  Term: {
    class?: string;
    displayName?: string;
    editable?: boolean;
    id?: string;
    limits?: definitions["CovTermLimits"];
    modelType?: string;
    numberType?: string;
    /** @description Available Option Items */
    options?: definitions["Option"][];
    patternCode: string;
    required?: boolean;
    selectedTermValue?: string;
    termType?: string;
    valueType?: string;
  };
  policylocation_PolicyLocation: {
    addressLine1?: string;
    addressLine2?: string;
    addressType?: string;
    city?: string;
    fullTimeEmployees?: number;
    id?: string;
    isPrimaryLocation?: boolean;
    locationNumber?: number;
    nonSpecific?: boolean;
    partTimeEmployees?: number;
    postalCode?: string;
    /** @description Available of available questionsets */
    questionSets?: definitions["QuestionAnswerSet"][];
    state?: string;
  };
  QuestionAnswer: {
    answer: string;
    /** @description Array of choices */
    choices?: definitions["QuestionChoice"][];
    correctAnswer?: string;
    defaultAnswer?: string;
    displayText?: string;
    /** @description Array of filters */
    filters?: definitions["QuestionFilter"][];
    id?: string;
    priority?: number;
    questionCode: string;
    questionFormat?: string;
    questionType?: string;
    required?: boolean;
  };
  QuestionAnswerSet: {
    displayText?: string;
    id?: string;
    /** @description Array of available questions with answers */
    questionAnswers?: definitions["QuestionAnswer"][];
    questionSetCode: string;
    questionSetType: string;
  };
  QuestionChoice: {
    choiceCode?: string;
    displayText?: string;
  };
  QuestionFilter: {
    answer?: string;
    questionCode?: string;
  };
  Modifiable: {
    displayName?: string;
    id: string;
    /** @description Array of Modifiers */
    modifiers?: definitions["Modifier"][];
  };
  Modifier: {
    displayName?: string;
    id?: string;
    /** Format: gw-bigdecimal */
    maximum?: string;
    /** Format: gw-bigdecimal */
    minimum?: string;
    patternCode: string;
    /** @description Array of RateFactors */
    rateFactors?: definitions["RateFactor"][];
    /** Format: gw-bigdecimal */
    rateWithinLimits?: string;
  };
  RateFactor: {
    /** Format: gw-bigdecimal */
    assessmentWithinLimits?: string;
    category?: string;
    displayName?: string;
    id?: string;
    justification?: string;
    /** Format: gw-bigdecimal */
    maximum?: string;
    /** Format: gw-bigdecimal */
    minimum?: string;
    patternCode: string;
  };
  /** @description Request/Response for Coverable */
  PolicyLine: {
    class?: string;
    /** @description Available coverables */
    coverables?: definitions["Coverable"][];
    displayName?: string;
    id?: string;
    /** @description Array of Modifiables */
    modifiables?: definitions["Modifiable"][];
    patternCode?: string;
    /** @description Array of QuestionSet */
    questionSets?: definitions["QuestionAnswerSet"][];
  };
  /** @description Details of a CA7 Coverage Symbol */
  CA7CoverageSymbol: {
    description?: string;
    displayName?: string;
    editable?: boolean;
    patternCode?: string;
    selected?: boolean;
  };
  /** @description Details of a CA7 Coverage Symbol Group */
  CA7CoverageSymbolGroup: {
    coverageSymbols?: definitions["CA7CoverageSymbol"][];
    displayName?: string;
    patternCode?: string;
  };
  /** @description Request for Update CA7 Coverage Symbol Groups */
  CA7CoverageSymbolGroupsRequest: {
    data?: definitions["CA7CoverageSymbolGroup"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for CA7 Coverage Symbol Groups */
  CA7CoverageSymbolGroupsResponse: {
    /** @description An array of CA7 Coverage Symbol Groups */
    data?: definitions["CA7CoverageSymbolGroup"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Details of a CA7 Driver */
  CA7Driver: {
    /** Format: date */
    dateOfBirth?: string;
    driverNumber?: number;
    firstName: string;
    id?: string;
    lastName: string;
    licenseNumber: string;
    middleName?: string;
    state: string;
  };
  /** @description Request for CA7 Driver */
  CA7DriverRequest: {
    data?: definitions["CA7Driver"];
    meta?: definitions["RequestMeta"];
  };
  CA7DriverResponse: {
    data?: definitions["CA7Driver"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Response for CA7 Drivers */
  CA7DriversResponse: {
    /** @description An array of CA7 Drivers */
    data?: definitions["CA7Driver"][];
    meta?: definitions["ResponsesMeta"];
  };
  CA7Line: {
    /** Format: double */
    ca7Costs?: number;
    ca7GoverningClassCodeDesc_Ext?: string;
    ca7GoverningClassCodePublicID_Ext?: string;
    ca7GoverningClassCode_Ext?: string;
    ca7HazardGrade_Ext?: string;
    ca7MarketSegment_Ext?: string;
    garageServices?: definitions["CA7GarageService"][];
    policyLineDisplayName_Ext?: string;
  };
  /** @description Request for CA7 Line */
  CA7LineRequest: {
    data?: definitions["CA7Line"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for CA7 Line Response */
  CA7LineResponse: {
    data?: definitions["CA7Line"];
    meta?: definitions["ResponseMeta"];
  };
  CA7GarageService: {
    displayName?: string;
    garagingLocation?: string;
    insuredValue?: number;
    jurisdiction?: string;
    location?: definitions["PolicyLocation"];
    numberOfEmployees?: number;
    numberOfPartners?: number;
    ownerDisplayName?: string;
    physicalDamageClassification?: string;
    publicId?: string;
    territory?: string;
    typeLabel?: string;
    unitNumber?: number;
    zipCode?: string;
  };
  ClassCode: {
    classCode?: string;
    classCodeDescriptions?: string[];
  };
  /** @description Response for Class Codes */
  ClassCodesResponse: {
    data?: definitions["ClassCode"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Details for CP7 Additional Interest */
  CP7AdditionalInterest: {
    accountContactId?: string;
    additionalInterestType?: string;
    building?: definitions["CP7Building"];
    contact?: definitions["Contact"];
    id?: string;
    scheduledItemId?: string;
  };
  CP7AdditionalInterestAndBuilding: {
    additionalInterestType?: string;
    buildingId?: string;
  };
  CP7AdditionalInterestRequest: {
    data?: definitions["CP7AdditionalInterestRequestData"];
  };
  /** @description Request Data to Add CP7AdditionalInterest */
  CP7AdditionalInterestRequestData: {
    buildings?: definitions["CP7AdditionalInterestAndBuilding"][];
    contact?: definitions["Contact"];
  };
  CP7AdditionalInterestResponse: {
    data?: definitions["CP7AdditionalInterest"];
    meta?: definitions["ResponseMeta"];
  };
  CP7AdditionalInterestsResponse: {
    data?: definitions["CP7AdditionalInterest"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Details for CP7 Building */
  CP7Building: {
    CP7Authority_Ext?: string;
    CP7FireHazard_Ext?: string;
    CP7TheftHazard_Ext?: string;
    RoofCondition_Ext?: string;
    advSubClass_Ext?: number;
    basicGroupIISymbol?: string;
    bceg?: string;
    bcegClass?: string;
    bldgIncludedInOperationalUnit?: string;
    blktCauseOfLossValue?: string;
    blktIDNum?: number;
    buildingDescription_Ext?: string;
    classCode?: string;
    classificationDescription?: string;
    completedBasicGroupIISymbol?: string;
    conformsToCondoActs?: string;
    constructionCode?: number;
    constructionType?: string;
    constructionTypeToUse?: string;
    covType?: string;
    cp7LocationAddressLine1?: string;
    cp7LocationAddressPostalCode?: string;
    cp7LocationAddressStateCode?: string;
    cp7LocationId?: string;
    cp7bldgGovClsCodeDesc_Ext?: string;
    cp7bldgGoverningClsCode_Ext?: string;
    eqCauseOfLossCovBlktIDNum?: number;
    eqClass?: string;
    eqCovIndicator?: string;
    eqRoofTankHazard?: string;
    floodBlanketDescription_Ext?: number;
    floodCovApply_Ext?: string;
    fungusWetRotDryRotBacteriaCovStructApply?: string;
    fungusWetRotDryRotBacteriaCovSubLimit?: number;
    id?: string;
    incApt?: string;
    includedInBlkt?: string;
    locOfHeatingPlantIndicator?: string;
    marketSegment?: string;
    numStories?: number;
    openSides?: string;
    plasticGreenhouse?: string;
    publicInstitutionalPlanApply?: string;
    ratingType?: string;
    ratingTypeBasicGroupII?: string;
    rentalProperty?: string;
    /** Format: double */
    specificGroupIIRate?: number;
    /** Format: double */
    specificGroupIRate?: number;
    sprinklerSystem?: string;
    squareFootageOfBuilding?: number;
    subStdConditionA?: boolean;
    subStdConditionB?: boolean;
    subStdConditionC?: boolean;
    subStdConditionD?: boolean;
    subStdConditionE?: boolean;
    /** Format: double */
    terrorOverridePremium?: number;
    terrorismOverride?: string;
    unitNumber?: number;
    vacantBuilding?: string;
    yearElecWirReplaced_Ext?: number;
    yearHVACReplaced_Ext?: number;
    yearOfConstructionCode?: number;
    yearPlumbReplaced_Ext?: number;
    yearRoofReplaced_Ext?: number;
  };
  CP7BuildingRequest: {
    data?: definitions["CP7Building"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update CP7 Building */
  CP7BuildingResponse: {
    data?: definitions["CP7Building"];
    meta?: definitions["ResponseMeta"];
  };
  CP7BuildingsRequest: {
    data?: definitions["CP7Building"][];
    meta?: definitions["RequestMeta"];
  };
  CP7BuildingsResponse: {
    data?: definitions["CP7Building"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Details for CP7 BusinessIncome */
  CP7BusinessIncome: {
    blktCauseOfLossValue?: string;
    blktIDNum?: number;
    businessIncomeNumber?: number;
    combinedTypeOfRiskEducationalPct?: number;
    combinedTypeOfRiskManufacturingPct?: number;
    combinedTypeOfRiskMercantilePct?: number;
    combinedTypeOfRiskRentalPct?: number;
    covType?: string;
    cp7BuildingId?: string;
    cp7LocationId?: string;
    eqCauseOfLossCovBlktIDNum?: number;
    eqCovIndicator?: string;
    eqSprinklerLeakageOnly?: string;
    extendedPeriodApplies?: string;
    fungusWetRotDryRotBacteriaCovIncrdPeriodRestorationIndicator?: string;
    fungusWetRotDryRotBacteriaIncrdPeriodRestoration?: string;
    id?: string;
    includedInBlkt?: string;
    /** Format: double */
    terrorOverridePremium?: number;
    terrorismOverride?: string;
    typeOfRisk?: string;
    unitNumber?: number;
    watercraftExclBuybackConstrctnOption?: string;
    waterfrontProperty?: string;
  };
  CP7BusinessIncomeRequest: {
    data?: definitions["CP7BusinessIncome"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update CP7 BusinessIncome */
  CP7BusinessIncomeResponse: {
    data?: definitions["CP7BusinessIncome"];
    meta?: definitions["ResponseMeta"];
  };
  CP7BusinessIncomesRequest: {
    data?: definitions["CP7BusinessIncome"][];
    meta?: definitions["RequestMeta"];
  };
  CP7BusinessIncomesResponse: {
    data?: definitions["CP7BusinessIncome"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Details for CP7 BusinessIncome */
  CP7ClassCodeDescription: {
    classCodeBldg?: string;
    value?: string;
  };
  CP7ClassCodeDescriptionsResponse: {
    data?: definitions["CP7ClassCodeDescription"][];
    meta?: definitions["ResponsesMeta"];
  };
  CP7Line: {
    cappedPriorTier_Ext?: number;
    cappedTier_Ext?: number;
    cp7Buildings?: definitions["CP7Building"][];
    cp7BusinessIncomes?: definitions["CP7BusinessIncome"][];
    /** Format: double */
    cp7Costs?: number;
    cp7GoverningClassCodeDesc_Ext?: string;
    cp7GoverningClassCodePublicID_Ext?: string;
    cp7GoverningClassCode_Ext?: string;
    cp7LineBlktRated?: string;
    cp7LineConditionalExclusionRatingOption?: string;
    cp7LineCoverageForCertifiedActs?: string;
    cp7LineEQSubLimitBlktIndicator?: string;
    cp7LineFloodCovEndtBlktIndicator?: string;
    cp7LineFungusWetRotDryRotBacteriaCov?: string;
    cp7LineIRPMApplies?: string;
    cp7LineMUBlktRated?: string;
    cp7LineMUPolicyType?: string;
    cp7LineMarketSegment_Ext?: string;
    cp7LineMultiPremiumAndDispersionCredit?: string;
    /** Format: double */
    cp7LineMultiPremiumAndDispersionCreditFactorUser?: number;
    cp7LinePackageModEligibility?: string;
    cp7LinePackagePolicy?: string;
    cp7LinePolicyType?: string;
    cp7LinePostTRIAExclusion?: string;
    cp7LineRiskType?: string;
    cp7LineTRIAConditionalExclusion?: string;
    /** Format: date */
    cp7LineTRIAExpirationDate?: string;
    cp7LineTRIAType?: string;
    cp7Locations?: definitions["CP7Location"][];
    cp7OccupancyClasses?: definitions["CP7OccupancyClass"][];
    cp7PersonalProperties?: definitions["CP7PersonalProperty"][];
    cp7SpecialClassBusinessIncomes?: definitions["CP7SpecialClassBusinessIncome"][];
    cp7SpecialClasses?: definitions["CP7SpecialClass"][];
    id?: string;
    uncappedTier_Ext?: number;
  };
  /** @description Request for Update CP7 Details */
  CP7LineRequest: {
    data?: definitions["CP7Line"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for CP7 Details */
  CP7LineResponse: {
    data?: definitions["CP7Line"];
    meta?: definitions["ResponseMeta"];
  };
  CP7Location: {
    CrimeScore_Ext?: string;
    RegionCode_Ext?: string;
    RegionDescription_Ext?: string;
    basicGroupIIRatingTerr?: string;
    basicGroupIRatingTerr?: string;
    city?: string;
    cityOverride?: string;
    county?: string;
    eqCauseOfLossForm?: string;
    eqTerr?: string;
    floodCovIndicator?: string;
    fungusWetRotDryRotBacteriaCovLocApply?: string;
    fungusWetRotDryRotBacteriaCovSubLimit?: number;
    geographicWindHazardLevelTerritory?: string;
    id?: string;
    locationNumber?: number;
    multipleResidentialPropSpecialCredit?: string;
    operationalUnitIndicator?: string;
    policyLocationId: string;
    protectClass?: string;
    specialRatingTerr?: string;
    territorialZone?: string;
    terrorismTerritory?: string;
    unitNumber?: number;
    zipCode?: string;
    zipCodeOverride?: string;
  };
  /** @description Request for Create/Update New Location */
  CP7PolicyLocationRequest: {
    data?: definitions["CP7Location"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update New Location */
  CP7PolicyLocationResponse: {
    data?: definitions["CP7Location"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for Patch Locations */
  CP7PolicyLocationsRequest: {
    /** @description Update array of locations */
    data?: definitions["CP7Location"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for getPolicyLocations */
  CP7PolicyLocationsResponse: {
    /** @description Policy locations as array of the policyLocations */
    data?: definitions["CP7Location"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Details for CP7 OccupancyClass */
  CP7OccupancyClass: {
    advSubClass_Ext?: number;
    area?: number;
    classCode?: string;
    classDesc?: string;
    conformsToCondoActs?: string;
    covForm?: string;
    cp7BuildingId?: string;
    cp7LocationId?: string;
    id?: string;
    marketSegment?: string;
    occupCategory?: string;
    occupancyNumber?: number;
    publicInstitutionalPlanApply?: string;
    ratingType?: string;
    specialIncludingTheftTotAmtInsurance?: number;
    specialTotAmtInsurance?: number;
    sprinklerSystem?: string;
    theftDeductible?: string;
    totAmtInsurance?: number;
    unitNumber?: number;
    windstormOrHailTotAmtInsurance?: number;
  };
  CP7OccupancyClassRequest: {
    data?: definitions["CP7OccupancyClass"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update CP7OccupancyClass */
  CP7OccupancyClassResponse: {
    data?: definitions["CP7OccupancyClass"];
    meta?: definitions["ResponseMeta"];
  };
  CP7OccupancyClassesRequest: {
    data?: definitions["CP7OccupancyClass"][];
    meta?: definitions["RequestMeta"];
  };
  CP7OccupancyClassesResponse: {
    data?: definitions["CP7OccupancyClass"][];
    meta?: definitions["ResponsesMeta"];
  };
  CP7PersonalPropertiesRequest: {
    data?: definitions["CP7PersonalProperty"][];
    meta?: definitions["RequestMeta"];
  };
  CP7PersonalPropertiesResponse: {
    data?: definitions["CP7PersonalProperty"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Details for CP7 PersonalProperty */
  CP7PersonalProperty: {
    blktCauseOfLossValue?: string;
    blktIDNum?: number;
    causeOfLossToUse?: string;
    covForm?: string;
    covType?: string;
    cp7BuildingId?: string;
    cp7LocationId?: string;
    cp7OccupancyClassId?: string;
    eqCauseOfLossCovBlktIDNum?: number;
    eqCovIndicator?: string;
    eqGrade?: string;
    eqSprinklerLeakageOnly?: string;
    id?: string;
    includedInBlkt?: string;
    personalPropertyNumber?: number;
    specialTheftExclusionIndicator?: number;
    /** Format: double */
    specificGroupIIRate?: number;
    /** Format: double */
    specificGroupIRate?: number;
    /** Format: double */
    terrorOverridePremium?: number;
    terrorismOverride?: string;
    unitNumber?: number;
    yardPropertyIndicator?: string;
  };
  CP7PersonalPropertyRequest: {
    data?: definitions["CP7PersonalProperty"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update CP7PersonalProperty */
  CP7PersonalPropertyResponse: {
    data?: definitions["CP7PersonalProperty"];
    meta?: definitions["ResponseMeta"];
  };
  CP7SpecialClass: {
    basicGroupIISymbol?: string;
    /** Format: double */
    basicGroupIISymbolNum?: number;
    blktCauseOfLossValue?: string;
    blktIDNum?: number;
    buildingIDNumber?: number;
    classCode?: string;
    classDescription?: string;
    conformsToCondoActs?: string;
    covForm?: string;
    cp7LocationId?: string;
    eqCauseOfLossCovBlktIDNum?: number;
    eqClass?: string;
    eqCovIndicator?: string;
    id?: string;
    includedInBlkt?: string;
    includedInBuilding?: string;
    publicInstitutionalPlanApply?: string;
    rentalProperty?: string;
    specialClassDescConvertedOption?: string;
    specialClassDescription_Ext?: string;
    specialClassNumber?: number;
    structDesc?: string;
    /** Format: double */
    terrorOverridePremium?: number;
    terrorismOverride?: string;
    unitNumber?: number;
  };
  /** @description Request for Create/Update Special Class */
  CP7SpecialClassRequest: {
    data?: definitions["CP7SpecialClass"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update CP7 Special Class */
  CP7SpecialClassResponse: {
    data?: definitions["CP7SpecialClass"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for Patch Locations */
  CP7SpecialClassesRequest: {
    /** @description Update array of CP7 Special Classes */
    data?: definitions["CP7SpecialClass"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Special Classes */
  CP7SpecialClassesResponse: {
    /** @description Array of Special Classes */
    data?: definitions["CP7SpecialClass"][];
    meta?: definitions["ResponsesMeta"];
  };
  CP7SpecialClassBusinessIncome: {
    blktCauseOfLossValue?: string;
    blktIDNum?: number;
    combinedTypeOfRiskEducationalPct?: number;
    combinedTypeOfRiskManufacturingPct?: number;
    combinedTypeOfRiskMercantilePct?: number;
    combinedTypeOfRiskRentalPct?: number;
    covType?: string;
    cp7LocationId?: string;
    cp7SpecialClassId?: string;
    eqCauseOfLossCovBlktIDNum?: number;
    eqCovIndicator?: string;
    extendedPeriodApplies?: string;
    id?: string;
    includedInBlkt?: string;
    specClsBINumber?: number;
    /** Format: double */
    terrorOverridePremium?: number;
    terrorismOverride?: string;
    typeOfRisk?: string;
    unitNumber?: number;
    waterFrontProperty?: string;
    watercraftExclBuybackConstrctnOption?: string;
  };
  /** @description Request for Create/Update Special Class Business Income */
  CP7SpecialClassBusinessIncomeRequest: {
    data?: definitions["CP7SpecialClassBusinessIncome"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update CP7 Special Class Business Income */
  CP7SpecialClassBusinessIncomeResponse: {
    data?: definitions["CP7SpecialClassBusinessIncome"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for Patch Special Class Business Income */
  CP7SpecialClassBusinessIncomesRequest: {
    /** @description Update array of CP7 Special Class Business Income */
    data?: definitions["CP7SpecialClassBusinessIncome"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Special Classes Business Incomes */
  CP7SpecialClassBusinessIncomesResponse: {
    /** @description Array of Special Class Business Incomes */
    data?: definitions["CP7SpecialClassBusinessIncome"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Class Code Description for CP7 Occupancy Class */
  CP7OccupancyClassCodeDescription: {
    classCodeOccupancy?: string;
    value?: string;
  };
  CP7OccupancyClassCodeDescriptionsResponse: {
    data?: definitions["CP7OccupancyClassCodeDescription"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Class Code Description for CP7 Special Class */
  CP7SpecialClassCodeDescription: {
    specialClassDescription?: string;
    value?: string;
  };
  CP7SpecialClassCodeDescriptionsResponse: {
    data?: definitions["CP7SpecialClassCodeDescription"][];
    meta?: definitions["ResponsesMeta"];
  };
  GoverningClassCode: {
    classCode: string;
    classDescription: string;
    hazardGradeCyberCode?: string;
    marketSegment: string;
    publicID: string;
    subCode: string;
  };
  /** @description Response for Governing Class Codes */
  GoverningClassCodeResponse: {
    data?: definitions["GoverningClassCode"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Details for GL7Exposure */
  GL7Exposure: {
    ClassGroup_Ext?: string;
    ExposureBasis_Ext?: string;
    /** Format: double */
    Exposure_Ext?: number;
    /** Format: double */
    ManualPremium_Ext?: number;
    /** Format: double */
    RatePer_Ext?: number;
    State_Ext?: string;
    /** Format: double */
    auditedCovExposure?: number;
    /** Format: double */
    auditedProdsCompltdOpsCovExp?: number;
    auditedProdsCompltdOpsExposure?: number;
    classCode?: string;
    classCodeId?: string;
    classDescription?: string;
    classificationType?: string;
    climbingFacilityOperator?: string;
    contractor?: string;
    driverEducationProvider?: string;
    edlClassCode?: string;
    edlExposure?: number;
    edlPremiumRatingBase?: string;
    edlclassDescription?: string;
    /** Format: double */
    estdControlCostWORRHzd?: number;
    /** Format: double */
    estimatedControlCostRatio?: number;
    gl7LocationId?: string;
    id?: string;
    ifAnyBasis?: string;
    ifAnyBasisProdsCompltdOps?: string;
    injurySuprvsInspctrsOtherEmpsCov?: string;
    leadConstructedPriorto1978PrimaFacieEvidenceofCompliance?: string;
    leadCovWithNoLetter?: string;
    leadHaveAllPremisesConstructedInOrAfter1978?: string;
    leadIsResidentialRiskWithUnitsConstructedPrior1978?: string;
    leadNumUnitsWithLOC?: number;
    leadNumUnitsWithLOIC?: number;
    leadNumberofUnitsLeadFree?: number;
    leadNumberofUnitsLeadMitigatedByIndependentClearanceInspection?: number;
    leadNumberofUnitsLeadMitigatedByPresumptiveCompliance?: number;
    leadNumberofUnitsLeadMitigatedByVisualInspection?: number;
    leadNumberofUnitsLeadSafe?: number;
    leadPredominateStatusOfLeadSafety?: string;
    leadPremisesConsideredLeadFree?: string;
    leadRentalPropertyDefinedinRhodeIslandGeneralLaws?: string;
    limitedCovForPersonalAndAdvertisingInjury?: string;
    liquorClassCode?: string;
    liquorClassCodeDescription?: string;
    liquorClassCodePublicId?: string;
    /** Format: double */
    liquorDedFactorOverride?: number;
    /** @default No Deductible */
    liquorDeductable?: string;
    /** Format: double */
    liquorELPOverride?: number;
    /** Format: double */
    liquorExposure?: number;
    liquorPremiumBasis?: string;
    lmtdProdsWithdrawalDeductibleFactorOverride?: number;
    medPayCovForStud?: string;
    miscIfAnyBasis?: string;
    muncipalityOpearatesAFireDepartment?: string;
    numPassgrFreightTrains?: string;
    othersThanProdsCompldOpsCov?: string;
    ownersContractorsClassCode?: string;
    ownersContractorsClassDescription?: string;
    /** Format: double */
    ownersContractorsELPOverOneMillionOverride?: number;
    /** Format: double */
    ownersContractorsELPOverride?: number;
    ownersContractorsExposure?: number;
    ownerscontractorsPremiumBase?: string;
    performTherapeuticOrCosmeticServices?: string;
    policyLocationId?: string;
    pollutionClassCode?: string;
    pollutionClassDescription?: string;
    pollutionExposure?: number;
    pollutionPremiumBasis?: string;
    premOpsBiDeductable?: string;
    /** Format: double */
    premOpsBiDeductableFactorOverride?: number;
    /** @default No Deductible */
    premOpsBiPdDeductable?: string;
    /** Format: double */
    premOpsBiPdDeductableFactorOverride?: number;
    /** Format: double */
    premOpsCovExposure?: number;
    /** Format: double */
    premOpsELPOverride?: number;
    premOpsExposure?: number;
    premOpsIncrdLimitTableAssignMent?: string;
    premOpsIncrdLimitTableAssignMentOverride?: string;
    /** @default No Deductible */
    premOpsPdDeductable?: string;
    /** Format: double */
    premOpsPdDeductableFactorOverride?: number;
    premOpsPremiumBasis?: string;
    /** @default No Deductible */
    prodsCompldOpsBiDeductable?: string;
    /** Format: double */
    prodsCompldOpsBiDeductableFactorOverride?: number;
    /** @default No Deductible */
    prodsCompldOpsBiPdDeductable?: string;
    /** Format: double */
    prodsCompldOpsBiPdDeductableFactorOveride?: number;
    prodsCompldOpsCov?: string;
    /** Format: double */
    prodsCompldOpsCovExposure?: number;
    /** Format: double */
    prodsCompldOpsDefenceWithinLimitsBasicLimitMultiplier?: number;
    /** Format: double */
    prodsCompldOpsDefenceWithinLimitsILF?: number;
    /** Format: double */
    prodsCompldOpsELPOverride?: number;
    prodsCompldOpsExposure?: number;
    prodsCompldOpsIncrdLimitTableAssignment?: string;
    prodsCompldOpsIncrdLimitTableAssignmentFactorOverride?: number;
    /** @default No Deductible */
    prodsCompldOpsPdDeductable?: string;
    /** Format: double */
    prodsCompldOpsPdDeductableFactorOverride?: number;
    prodsCompldOpsPremiumBasis?: string;
    /** Format: double */
    prodsCompltdOpsLossCost?: number;
    productCoverage?: string;
    /** Format: double */
    productWithdrawalCovExposure?: number;
    productWithdrawalCoverage?: string;
    /** @default No Deductible */
    productWithdrawalDeductable?: string;
    /** Format: double */
    productWithdrawalDeductableFactorOverride?: number;
    /** Format: double */
    productWithdrawalELPOveride?: number;
    productWithdrawalExpenseAndLiabiltyIncrdLimitTableAssignment?: string;
    productWithdrawalExpenseAndLiabiltyIncrdLimitTableAssignmentOverride?: string;
    productWithdrawalExposure?: number;
    productWithdrawalPremiumBasis?: string;
    publicOrPrivateSchool?: string;
    railRoadClassDescription?: string;
    railRoadExposure?: number;
    railRoadPremiumBasis?: string;
    railRoadclassCode?: string;
    /** Format: gw-bigdecimal */
    rate?: string;
    residentialDwellingConsistingOf1to4Units?: string;
    specialProtectiveHighwayClassCode?: string;
    specialProtectiveHighwayClassDescription?: string;
    specialProtectiveHighwayExposure?: number;
    specialProtectiveHighwayPremiumBasis?: string;
    sprayPainting?: string;
    stopGapIncrdLimitFactorOverride?: number;
    sublineTypeName: string;
    terrorismExposureClassesOther?: string;
    terrorismExposureClassesPremises?: string;
    terrorismExposureClassesProducts?: string;
    totalCostWorkTrainsOrOtherRREquipmtAssigned?: number;
    ustClassCode?: string;
    ustClassDescription?: string;
    ustExposure?: number;
    ustPremiumBasis?: string;
  };
  GL7ExposureRequest: {
    data?: definitions["GL7Exposure"];
    meta?: definitions["RequestMeta"];
  };
  GL7ExposureResponse: {
    data?: definitions["GL7Exposure"];
    meta?: definitions["ResponseMeta"];
  };
  GL7ExposuresRequest: {
    data?: definitions["GL7Exposure"][];
    meta?: definitions["RequestMeta"];
  };
  GL7ExposuresResponse: {
    data?: definitions["GL7Exposure"][];
    meta?: definitions["ResponsesMeta"];
  };
  GL7Line: {
    cappedPriorTier_Ext?: number;
    cappedTier_Ext?: number;
    /** Format: double */
    experienceModifier_Ext?: number;
    /** Format: double */
    gl7Costs?: number;
    /** @description Array of Exposures */
    gl7Exposures?: definitions["GL7Exposure"][];
    gl7GoverningClassCodeDesc_Ext?: string;
    gl7GoverningClassCodePublicID_Ext?: string;
    gl7GoverningClassCode_Ext?: string;
    /** @description Array of GL7Locations */
    gl7Locations?: definitions["GL7Location"][];
    /** @description Array of SublineType */
    gl7SublineTypes?: definitions["GL7SublineType"][];
    /** @description Array of Sublines */
    gl7Sublines?: definitions["GL7Subline"][];
    hazardGradeCyberCode?: string;
    marketSegment?: string;
    /** Format: double */
    minPremAmmount_Ext?: number;
    /** Format: double */
    premOpsLossCost_Ext?: number;
    /** Format: double */
    prodsCompldOpsLossCost_Ext?: number;
    /** Format: double */
    scheduleModifier_Ext?: number;
    /** Format: double */
    tierFactor_Ext?: number;
    uncappedTier_Ext?: number;
  };
  /** @description Request for GL7 Line */
  GL7LineRequest: {
    data?: definitions["GL7Line"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for GL7 Line Response */
  GL7LineResponse: {
    data?: definitions["GL7Line"];
    meta?: definitions["ResponseMeta"];
  };
  GL7Location: {
    certifiedActsOfTerrorismManhattan?: string;
    /** @description Array of Exposures */
    gl7Exposures?: definitions["GL7Exposure"][];
    id?: string;
    /** @default No Deductible */
    liquorDeductible?: string;
    liquorLiabTerr?: string;
    liquorLiabTerritory?: string;
    locationNumber?: number;
    ownersContractorsTerritory?: string;
    policyLocation?: definitions["PolicyLocation"];
    policyLocationId: string;
    pollutionTerritory?: string;
    /** @default No Deductible */
    premOpsBIDeductible?: string;
    /** @default No Deductible */
    premOpsBIPDDeductible?: string;
    /** @default No Deductible */
    premOpsPDDeductible?: string;
    premisesOperationsTerritory?: string;
    /** @default No Deductible */
    prodsCompldOpsBIDeductible?: string;
    /** @default No Deductible */
    prodsCompldOpsBIPDDeductible?: string;
    /** @default No Deductible */
    prodsCompldOpsPDDeductible?: string;
    prodsCompldOpsTerritory?: string;
    /** @default No Deductible */
    productWithdrawalDeductible?: string;
    railroadTerritory?: string;
    sublineTypeName: string;
    territoryIndicator?: string;
    terrorismTerritory?: string;
    zipCode?: string;
    zipCodeOverride?: string;
  };
  /** @description Request for Create/Update New Location */
  GL7PolicyLocationRequest: {
    data?: definitions["GL7Location"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update GL7 New Location */
  GL7PolicyLocationResponse: {
    data?: definitions["GL7Location"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for Patch Locations */
  GL7PolicyLocationsRequest: {
    /** @description Update array of locations */
    data?: definitions["GL7Location"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for getPolicyLocations */
  GL7PolicyLocationsResponse: {
    /** @description GL7 locations as array */
    data?: definitions["GL7Location"][];
    meta?: definitions["ResponsesMeta"];
  };
  GL7Subline: {
    aerialRecreationalDevicesAndFacilities?: string;
    byLawsCreatedOrAmendedOnOrAfterDate?: string;
    condominiumAssociation?: string;
    damageToPremisesRentedToYouExclGovernmentalSubdivision?: string;
    id?: string;
    inspectionAgenciesPerformBoilerPressureVesselInspection?: string;
    jurisdiction: string;
    leadHaveAllPremisesConstructedInOrAfter1978?: string;
    leadIsMultiplePremiseRiskConstructedBefore1978AndOrAfter1978?: string;
    leadWishToPurchaseCoverageForPremisesCertifiedAsLeadFree?: string;
    radonMeasurementAndMitigationContractors?: string;
    residentialContractor?: string;
    riskAgreedToPollutionExclusion?: string;
    riskPurchasedSeparatePollutionPolicy?: string;
    stopGap?: string;
    sublineTypeName: string;
    surfaceCoalMiningOpearations?: string;
  };
  /** @description Response for GL7Subline Details */
  GL7SublinesReponse: {
    data?: definitions["GL7Subline"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Request for Update GL7Subline Details */
  GL7SublinesRequest: {
    data?: definitions["GL7Subline"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Details for Gl7 Details */
  GL7SublineType: {
    annualBasicLimitsCoPremiumOverridePremOps1?: number;
    annualBasicLimitsCoPremiumOverrideProdCompldOps1?: number;
    /** Format: double */
    compositeExposure?: number;
    compositeRating?: string;
    coverageForm?: string;
    damageToPremisesRentedToYouExcl?: string;
    edlCoverageForm?: string;
    /** Format: date */
    edlRetroactiveDate?: string;
    erpDramaticChangeOnExposure?: string;
    /** Format: double */
    erpExposuresOnSpecialUWBasisPremOpsCurrent?: number;
    /** Format: double */
    erpExposuresOnSpecialUWBasisProdCompldOpsCurrent?: number;
    erpPeriodEnds6MonthsPrior?: string;
    erpYearsOfExperienceIncurred?: number;
    /** Format: date */
    experienceBusinessStartDate?: string;
    experienceNumberYearsRequired?: number;
    experienceNumberYearsRequired1?: number;
    experienceRatingApplies?: string;
    governmentalSubdivision?: string;
    id?: string;
    legalEntity?: string;
    limitedCovForDesignatedUnmannedAircraft?: string;
    liquorCoverageForm?: string;
    /** Format: date */
    liquorRetroactiveDate?: string;
    medicalPaymentsExcl?: string;
    multistate?: string;
    ownersContractorsCoverageForm?: string;
    /** Format: double */
    packageModFactor?: number;
    packagePolicy?: string;
    personalAndAdvertisingInjuryExcl?: string;
    pollutionCleanUpCoverage?: string;
    pollutionCoverageForm?: string;
    /** Format: date */
    pollutionRetroactiveDate?: string;
    premOpsProdsCoverageForm?: string;
    /** Format: date */
    premOpsProdsRetroactiveDate?: string;
    /** Format: double */
    premiumDiscountPercentage?: number;
    prodsWithdrawalCoverage?: string;
    productWithdrawalCoverageType?: string;
    /** Format: date */
    productWithdrawalCutOffDate?: string;
    productWithdrawalParticipationPercentage?: number;
    /** Format: date */
    productsWithdrawalCutOff?: string;
    railroadCoverageForm?: string;
    /** Format: date */
    retroActiveDate?: string;
    retroActiveDateApplies?: string;
    riskType?: string;
    scheduleRatingModificationApplies?: string;
    sizeOfRiskRatingApplies?: string;
    sublineTypeName: string;
    terrorismCoverage?: string;
    /** Format: date */
    triaExpirationDate?: string;
    triaExtended?: string;
    tripTerminatesBeforeExpirationDate?: string;
    /** Format: date */
    undergroundStorageTankRetroactiveDate?: string;
    ustCoverageForm?: string;
    yearInClaimsMade?: number;
  };
  GL7SublineTypesRequest: {
    data?: definitions["GL7SublineType"][];
    meta?: definitions["RequestMeta"];
  };
  GL7SublineTypesResponse: {
    data?: definitions["GL7SublineType"][];
    meta?: definitions["ResponsesMeta"];
  };
  IndustryCode: {
    classification?: string;
    code?: string;
    domain?: string;
    /** Format: date */
    effectiveDate?: string;
  };
  IndustryCodeResponse: {
    data?: definitions["IndustryCode"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Request for Copy Submission */
  CopySubmissionRequest: {
    data?: definitions["SubmissionRequest"];
    meta?: definitions["RequestMeta"];
  };
  Job: {
    Jobstatus: string;
    auditType: string;
    jobId: string;
    linePatternCodes: string[];
    operatingUnit: string;
    policyNumber: string;
  };
  /** @description Request for Create Draft Submission */
  JobRequest: {
    data?: definitions["PolicyPeriod"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create Draft Submission */
  JobResponse: {
    data?: definitions["PolicyPeriod"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Response for list of audit jobs numbers */
  JobSearchList: {
    jobs?: definitions["Job"][];
  };
  /** @description Response for job search results */
  JobSearchResponse: {
    data?: definitions["JobSearchList"];
    meta?: definitions["ResponseMeta"];
  };
  PolicyPeriod: {
    account?: definitions["Account"];
    accountNumber: string;
    annualSales?: definitions["MonetaryAmount"];
    assignedUserName?: string;
    baseState: string;
    busOpsDescription?: string;
    businessGroup?: string;
    ca7Line?: definitions["CA7Line"];
    /** @description Array of Contacts */
    contacts?: definitions["Contact"][];
    cp7Line?: definitions["CP7Line"];
    declineReason?: string;
    descOfOperations?: string;
    doingBusinessAs?: string;
    fein?: string;
    gl7Line?: definitions["GL7Line"];
    governingClassCode?: string;
    governingClassCodeDesc?: string;
    governingClassCodePublicID?: string;
    governingState?: string;
    hazardGradeCyberCode?: string;
    id?: string;
    industryCode?: string;
    industryCodeClassification?: string;
    industryCodeDescription?: string;
    /** Format: date */
    jobCancellationDate?: string;
    /** Format: date */
    jobEffectiveDate: string;
    /** Format: date */
    jobExpirationDate: string;
    jobNumber?: string;
    jobStatus?: string;
    jobSubType?: string;
    linePatternCodes?: string[];
    /** @description Array of PolicyLocations */
    locations?: definitions["PolicyLocation"][];
    mailingAddress?: definitions["Location"];
    marketSegment?: string;
    naicsClassification?: string;
    naicsCode?: string;
    offering?: string;
    operatingUnit: string;
    organizationId?: number;
    packageRiskType?: string;
    paymentPlans?: definitions["PaymentPlan"][];
    policyNumber?: string;
    policyPeriodId?: string;
    policySubType?: string;
    policySymbol?: string;
    policyType?: string;
    priorCarrier?: string;
    /** @description Array of PriorPolicies */
    priorPolicies?: definitions["PriorPolicy"][];
    producerCode: string;
    producerContact?: definitions["ProducerContact"];
    producerName?: string;
    producerUser?: string;
    producerUserEmail?: string;
    productName?: string;
    quote?: definitions["Quote"];
    /** Format: date */
    quoteExpirationDate?: string;
    quoteType: string;
    requestorEmail?: string;
    requestorFirstName?: string;
    requestorLastName?: string;
    requestorOrganizationId?: number;
    targetPremium?: definitions["MonetaryAmount"];
    termNumber?: number;
    termType: string;
    underwritingIssues?: definitions["UWIssue"][];
    wcmLine?: definitions["WCMLine"];
    wglline?: definitions["WGLLine"];
    wimLine?: definitions["WIMLine"];
    yearBusinessStarted?: number;
  };
  SubmissionRequest: {
    requestorEmail: string;
    requestorFirstName: string;
    requestorLastName: string;
    requestorOrganizationId: number;
  };
  Account: {
    accountHolder: definitions["Contact"];
    accountNumber?: string;
    accountOrgType: string;
    accountStatus?: string;
    id?: string;
    primaryContact?: definitions["Contact"];
    producerCodes?: string[];
    serviceTier?: string;
    yearBusinessStarted?: number;
    yearsInBusiness?: number;
  };
  /** @description Request for Create Account */
  AccountRequest: {
    data?: definitions["Account"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create Account */
  AccountResponse: {
    data?: definitions["Account"];
    meta?: definitions["ResponseMeta"];
  };
  FirstReportingStartDate: {
    code?: string;
    displayName?: string;
    priority?: number;
    selected?: boolean;
  };
  InstallmentPlan: {
    downPayment: definitions["MonetaryAmount"];
    id: string;
    installment: definitions["MonetaryAmount"];
    name: string;
    selected?: boolean;
    total: definitions["MonetaryAmount"];
  };
  PaymentPlan: {
    installmentPlanChoices?: definitions["InstallmentPlan"][];
    paymentMethodCode?: string;
    paymentMethodName?: string;
    reportingPlanChoices?: definitions["ReportingPlan"][];
  };
  PaymentPlanRequest: {
    data?: definitions["PaymentPlan"];
    meta?: definitions["RequestMeta"];
  };
  PaymentPlanResponse: {
    data?: definitions["PaymentPlan"][];
    meta?: definitions["ResponseMeta"];
  };
  ReportingPlan: {
    firstReportingStartDay?: definitions["FirstReportingStartDate"][];
    manualTemplateReporting: boolean;
    patternCode: string;
    /** Format: date */
    reportingStartDate?: string;
    selected?: boolean;
    startDayOfWeek?: definitions["StartDayOfWeek"][];
  };
  SetPaymentPlanRequest: {
    data?: definitions["PaymentPlan"];
    meta?: definitions["RequestMeta"];
  };
  SetPaymentPlanResponse: {
    data?: definitions["PaymentPlan"];
    meta?: definitions["ResponseMeta"];
  };
  StartDayOfWeek: {
    code?: string;
    displayName?: string;
    priority?: number;
    selected?: boolean;
  };
  PriorPoliciesRequest: {
    data?: definitions["PriorPolicy"][];
    meta?: definitions["RequestMeta"];
  };
  PriorPoliciesResponse: {
    data?: definitions["PriorPolicy"][];
    meta?: definitions["ResponseMeta"];
  };
  PriorPolicy: {
    annualPayroll?: definitions["MonetaryAmount"];
    annualPremium?: definitions["MonetaryAmount"];
    carrier?: string;
    /** Format: date */
    effectiveDate?: string;
    /** Format: date */
    expirationDate?: string;
    id?: string;
    lossHistoryProvided?: boolean;
    numLosses?: number;
    numLosses10k?: number;
    numLosses25k?: number;
    numLosses50k?: number;
    numLosses5k?: number;
    totalGrossIncurred?: definitions["MonetaryAmount"];
    totalPaid?: definitions["MonetaryAmount"];
    /** Format: date */
    valuationDate?: string;
  };
  PriorPolicyRequest: {
    data?: definitions["PriorPolicy"];
    meta?: definitions["RequestMeta"];
  };
  PriorPolicyResponse: {
    data?: definitions["PriorPolicy"];
    meta?: definitions["ResponseMeta"];
  };
  EarlyQuote: {
    earlyQuote?: boolean;
    meta?: definitions["RequestMeta"];
  };
  Quote: {
    totalCost?: definitions["MonetaryAmount"];
    totalCostChange?: definitions["MonetaryAmount"];
  };
  UWIssue: {
    active?: boolean;
    blockingPoint?: string;
    checkingSet?: string;
    id?: string;
    issueKey?: string;
    issueType?: string;
    longDescription?: string;
    shortDescription?: string;
  };
  /** @description Delete Response */
  DeleteResponse: {
    message?: string;
    responseStatus?: string;
  };
  ExcludeLocation: {
    /** @description Array of Locations */
    locations?: definitions["Locations"][];
  };
  /** @description Exclude Location Request */
  ExcludeLocationRequest: {
    data?: definitions["ExcludeLocation"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Exclude Location Request */
  ExcludeLocationResponse: {
    /** @description WCMLineSchedExclItem */
    data?: definitions["WCMLineSchedExclItem"][];
  };
  Locations: {
    city?: string;
    locationDescription: string;
    locationName?: string;
    publicID?: string;
    state?: string;
    streetAddress?: string;
    zipCode?: string;
  };
  WCMLine: {
    admiraltyLimit?: string;
    diseaseEachEmployeeLimit: string;
    diseasePolicyLimit: string;
    eachAccidentLimit: string;
    federalEmployersLiabilityActCoverageLimit?: string;
    hazardGrade?: string;
    /** @description Array of WCMJurisdictions */
    jurisdictions?: definitions["WCMJurisdiction"][];
    /** @description Array of WCMLocations */
    locations?: definitions["PolicyLocation"][];
    /** @description Array of PriorPolicies */
    priorPolicyLosses?: definitions["PriorPolicy"][];
    /** @description Array of QuestionAnswerSet */
    questionSets?: definitions["QuestionAnswerSet"][];
    /** @description Array of Owner Officers */
    wcOptions?: definitions["OwnerOfficer"][];
  };
  WCMLineRequest: {
    data?: definitions["WCMLine"];
    meta?: definitions["RequestMeta"];
  };
  WCMLineResponse: {
    data?: definitions["WCMLine"];
    meta?: definitions["ResponseMeta"];
  };
  WCMLineSchedExclItem: {
    city?: string;
    locationDescription: string;
    locationName?: string;
    publicID?: string;
    state?: string;
    streetAddress?: string;
    zipCode?: string;
  };
  OwnerOfficer: {
    accountContact?: definitions["AccountContact"];
    classCode?: string;
    id?: string;
    included?: string;
    jurisdictionState?: string;
    ownership?: number;
    relationshipTitle?: string;
  };
  OwnerOfficerRequest: {
    data?: definitions["OwnerOfficer"];
    meta?: definitions["RequestMeta"];
  };
  OwnerOfficerResponse: {
    data?: definitions["OwnerOfficer"];
    meta?: definitions["ResponseMeta"];
  };
  OwnerOfficersRequest: {
    data?: definitions["OwnerOfficer"][];
    meta?: definitions["RequestMeta"];
  };
  OwnerOfficersResponse: {
    data?: definitions["OwnerOfficer"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Detailes for AccountContact */
  AccountContact: {
    addressLine1?: string;
    addressLine2?: string;
    addressType?: string;
    city?: string;
    companyName?: string;
    contactType?: string;
    descOfOperations?: string;
    firstName?: string;
    lastName?: string;
    middleName?: string;
    postalCode?: string;
    primaryEmail?: string;
    primaryPhone?: string;
    primaryPhoneType?: string;
    state?: string;
  };
  contact_ProducerContact: {
    addressLine1?: string;
    addressLine2?: string;
    city?: string;
    firstName?: string;
    lastName?: string;
    postalCode?: string;
    producerEmail?: string;
    producerPhone?: string;
    state?: string;
  };
  /** @description Response for Jurisdiction Coverages Coverage */
  JurisdictionRequestResponse: {
    /** @description Response for Jurisdiction Coverages Coverage */
    data?: definitions["WCMJurisdiction"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Response for Coverage */
  WCMJurisdiction: {
    /** @description Available Coverages on Jurisdiction */
    coverages?: definitions["Coverage"][];
    id?: string;
    interStateId?: string;
    intraStateId?: string;
    state?: string;
  };
  WGLLine: {
    /** Format: double */
    TRIAPremium_Ext?: number;
    busOperDesc_Ext?: string;
    minimumRetainedPremium_Ext?: number;
    wglGoverningClassCodeDesc_Ext?: string;
    wglGoverningClassCodePublicID_Ext?: number;
    wglGoverningClassCode_Ext?: string;
    wglInception?: boolean;
    wglLineMarketSegment_Ext?: string;
    wglMinErndPremPct?: number;
    wglPolicySubType?: string;
    wglRetroactiveDate?: number;
    /** @description Array of Sublines */
    wglSubline?: definitions["WGLSubline"][];
  };
  /** @description Request for WGLLine */
  WGLLineRequest: {
    data?: definitions["WGLLine"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for WGL Line Response */
  WGLLineResponse: {
    data?: definitions["WGLLine"];
    meta?: definitions["ResponseMeta"];
  };
  WGLSubline: {
    WGLSublineType?: string;
    /** Format: double */
    WGLSublineTypeAvl?: number;
    id?: string;
    /** @description Array of Exposures */
    wglExposure?: definitions["WGLExposure"][];
  };
  /** @description Response for WGLSubline Details */
  WGLSublinesReponse: {
    data?: definitions["WGLSubline"][];
    meta?: definitions["ResponsesMeta"];
  };
  /** @description Request for Update WGLSubline Details */
  WGLSublinesRequest: {
    data?: definitions["WGLSubline"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Details for WGLExposure */
  WGLExposure: {
    /** Format: double */
    ActualHazardRate?: number;
    CausalityILF?: number;
    ClassCode?: string;
    ClassDescription?: string;
    EstimatedExposure?: string;
    ExposureBasis?: string;
    /** Format: double */
    ExposurePremium_Ext?: number;
    ExposuresPremium?: string;
    HazardLevel?: string;
    IfAny?: boolean;
    /** Format: double */
    PremisesCovFactor?: number;
    PremisesRate?: number;
    ProductsCovFactor?: number;
    /** Format: double */
    ProductsRate?: number;
    /** Format: double */
    Rate?: number;
    /** Format: double */
    RatePer?: number;
    RetentionFactor?: number;
    State?: string;
    StateILF?: number;
    SubclassDescription?: string;
    SublineTypeName: string;
    flatExposure?: boolean;
    id?: string;
    jurisdiction?: string;
    location?: definitions["PolicyLocation"];
  };
  WGLExposureRequest: {
    data?: definitions["WGLExposure"];
    meta?: definitions["RequestMeta"];
  };
  WGLExposureResponse: {
    data?: definitions["WGLExposure"];
    meta?: definitions["ResponseMeta"];
  };
  WGLExposuresRequest: {
    data?: definitions["WGLExposure"][];
    meta?: definitions["RequestMeta"];
  };
  WGLExposuresResponse: {
    data?: definitions["WGLExposure"][];
    meta?: definitions["ResponsesMeta"];
  };
  WIMLine: {
    id?: string;
    terrorism?: boolean;
    /** Format: double */
    wimCosts?: number;
    /** @description Coverage Parts on the WIMLine of submission */
    wimCoverageParts?: definitions["WIMCoveragePart"][];
  };
  /** @description Request for WIM Line */
  WIMLineRequest: {
    data?: definitions["WIMLine"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for WIM Line Response */
  WIMLineResponse: {
    data?: definitions["WIMLine"];
    meta?: definitions["ResponseMeta"];
  };
  WIMCoveragePart: {
    coveragePartType: string;
    displayName?: string;
    id?: string;
    /** @description Scheduled Equipment Items */
    scheduledEquipments?: definitions["WIMScheduledEquipment"][];
  };
  /** @description Request for Create CoveragePart */
  WIMCoveragePartRequest: {
    data?: definitions["WIMCoveragePart"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for WIM Coverage Part */
  WIMCoveragePartResponse: {
    data?: definitions["WIMCoveragePart"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for Patch CoverageParts */
  WIMCoveragePartsRequest: {
    /** @description Update array of coverage parts */
    data?: definitions["WIMCoveragePart"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for WIM Coverage Parts */
  WIMCoveragePartsResponse: {
    /** @description An array of WIMCoveragePart */
    data?: definitions["WIMCoveragePart"][];
    meta?: definitions["ResponsesMeta"];
  };
  WIMScheduledEquipment: {
    /** @description Additional Interest Details */
    additionalInterestDetails?: definitions["WIMAdditionalInterest"][];
    /** Format: double */
    deductible?: number;
    displayName?: string;
    equipmentId: string;
    equipmentNumber?: number;
    id?: string;
    /** Format: double */
    limit?: number;
    valuation?: string;
    year?: number;
  };
  /** @description Request for WIM Scheduled Equipment */
  WIMScheduledEquipmentRequest: {
    data?: definitions["WIMScheduledEquipment"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for WIM Scheduled Equipment */
  WIMScheduledEquipmentResponse: {
    data?: definitions["WIMScheduledEquipment"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Response for WIM Scheduled Equipments */
  WIMScheduledEquipmentsResponse: {
    /** @description An array of WIMScheduledEquipment */
    data?: definitions["WIMScheduledEquipment"][];
    meta?: definitions["ResponsesMeta"];
  };
  WIMAdditionalInterest: {
    accountContactId?: string;
    additionalInterestType?: string;
    certRequired?: boolean;
    contact?: definitions["Contact"];
    contractNumber?: string;
    contractorsEquipment?: string;
    id?: string;
    policyAdditionalInterest?: string;
  };
  /** @description Request for WIM Additional Interest */
  WIMAdditionalInterestRequest: {
    data?: definitions["WIMAdditionalInterest"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for WIM Additional Interest */
  WIMAdditionalInterestResponse: {
    data?: definitions["WIMAdditionalInterest"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Response for WIM Additional Interests */
  WIMAdditionalInterestsResponse: {
    /** @description An array of WIMAdditionalInterest */
    data?: definitions["WIMAdditionalInterest"][];
    meta?: definitions["ResponsesMeta"];
  };
  LOBLocation: {
    /** @description Available covered employees */
    coveredEmployees?: definitions["CoveredEmployee"][];
    id?: string;
    maxNumberOfEmployees?: number;
    numberOfEmployees?: number;
  };
  location_LocationResponseData: {
    id?: string;
    locationNumber?: string;
  };
  location_PolicyLocation: {
    addressLine1?: string;
    addressLine2?: string;
    addressType?: string;
    city?: string;
    county?: string;
    fullTimeEmployees?: number;
    id?: string;
    isPrimaryLocation?: boolean;
    latitude?: string;
    locationNumber?: number;
    longitude?: string;
    nonSpecific?: boolean;
    partTimeEmployees?: number;
    postalCode?: string;
    state: string;
  };
  /** @description Request for Create/Update New Location */
  location_PolicyLocationRequest: {
    data?: definitions["location_PolicyLocation"];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Create/Update New Location */
  location_PolicyLocationResponse: {
    data?: definitions["location_PolicyLocation"];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for Patch Locations */
  location_PolicyLocationsRequest: {
    /** @description Update array of locations */
    data?: definitions["location_PolicyLocation"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for getPolicyLocations */
  location_RetrievePolicyLocationsResponse: {
    /** @description Policy locations as array of the policyLocations */
    data?: definitions["location_PolicyLocation"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Request for coveredEmployee */
  CoveredEmployee: {
    classCode: string;
    classDescription?: string;
    coveredType?: string;
    estimatedAnnualPayroll: number;
    fullTimeEmployee: number;
    governingLaw?: string;
    id?: string;
    ifAny?: string;
    partTimeEmployee?: number;
    selectBy?: string;
  };
  PolicySymbolsResponse: {
    /** @description Array of Policy Symbols Response */
    data?: string[];
    meta?: definitions["ResponseMeta"];
  };
  Jurisdiction: {
    code: string;
    name?: string;
    selected: boolean;
  };
  SublineSelection: {
    id?: string;
    selected: boolean;
    states: definitions["Jurisdiction"][];
    sublineTypeName: string;
  };
  /** @description Request for Update Subline Selection */
  SublineSelectionRequest: {
    data?: definitions["SublineSelection"][];
    meta?: definitions["RequestMeta"];
  };
  /** @description Response for Subline Selection */
  SublineSelectionResponse: {
    data?: definitions["SublineSelection"][];
    meta?: definitions["ResponseMeta"];
  };
  /** @description Response for Limits */
  Limit: {
    diseaseEachEmployeeLimit?: string;
    diseasePolicyLimit?: string;
    eachAccidentLimit?: string;
  };
  LimitCodesResponse: {
    data?: definitions["Limit"][];
    meta?: definitions["RequestMeta"];
  };
  WCMLocation: {
    id?: string;
    maxNumberOfEmployees?: number;
    numberOfEmployees?: number;
    policyLocation?: definitions["PolicyLocation"];
  };
  WCMLocationDTO: {
    fixedId?: string;
    message?: string;
    stateCode?: string;
  };
  /** @description WCMLocation Request */
  WCMLocationRequest: {
    data?: definitions["WCMLocation"];
  };
  /** @description WCMLocation Response */
  WCMLocationResponse: {
    data?: definitions["WCMLocation"];
  };
  /** @description WCMLocations Request */
  WCMLocationsRequest: {
    /** @description Array of WCMlocation */
    data?: definitions["WCMLocation"][];
  };
  /** @description WCMLocations Response */
  WCMLocationsResponse: {
    /** @description Array of WCMLocationDTO */
    data?: definitions["WCMLocationDTO"][];
    meta?: definitions["ResponseMeta"];
  };
  UnderlyingPoliciesResponse: {
    data?: definitions["UnderlyingPolicy"][];
    meta?: definitions["ResponseMeta"];
  };
  UnderlyingPolicy: {
    carrierName?: string;
    coverageExistOnThisPolicy?: boolean;
    diseaseEachEmployeeLimit?: string;
    diseasePolicyLimit?: string;
    eachAccidentLimit?: string;
    /** Format: date */
    effectiveDate?: string;
    /** Format: date */
    expirationDate?: string;
    id?: string;
    isPolicyInPolicyCenter?: boolean;
    line: string;
    policyNumber?: string;
  };
  /** @description Request for Add WCU Underlying Policies */
  UnderlyingPolicyRequest: {
    data?: definitions["UnderlyingPolicyRequestBody"];
  };
  UnderlyingPolicyRequestBody: {
    carrierName?: string;
    diseaseEachEmployeeLimit?: string;
    diseasePolicyLimit?: string;
    eachAccidentLimit?: string;
    /** Format: date */
    effectiveDate?: string;
    /** Format: date */
    expirationDate?: string;
    isPolicyInPolicyCenter?: boolean;
    line: string;
    lineExistsOnSubmission: boolean;
    lineSubType?: string;
    underlyingPolicyJobNumber?: string;
  };
  /** @description Response for validateAndAddUnderlyingPolicy */
  UnderlyingPolicyResponse: {
    /** @description Added underlying policy */
    data?: definitions["UnderlyingPolicy"];
    meta?: definitions["ResponsesMeta"];
  };
  ErrorDetails: {
    lineNumber?: number;
    message?: string;
    parameterLocation?: string;
    parameterName?: string;
    stackTrace?: string;
  };
  ErrorInfo: {
    details?: definitions["ErrorDetails"][];
    developerMessage?: string;
    statusCode?: number;
    userMessage?: string;
  };
}

export interface parameters {
  /** @description The identifier for the activity */
  activityId: string;
  /** @description The identifier for the additional interest detail */
  additionalInterestId: string;
  /** @description The identifier for the CP7Building associated with CP7Location */
  buildingId: string;
  /** @description The identifier for the CP7 Business Income associated with CP7Building */
  businessIncomeId: string;
  /** @description The identifier for the coverage part */
  coveragePartId: string;
  /** @description The identifier for the CP7Location */
  cp7LocationId: string;
  /** @description The identifier for the driver */
  driverId: string;
  /** @description The identifier for the scheduled equipment */
  equipmentId: string;
  /** @description The identifier for the expousre associated with GL7Location */
  exposureId: string;
  /** @description The identifier for the policyLocation associated with GL7Location */
  gl7LocationId: string;
  /** @description A governing class code */
  governingClassCode: string;
  /** @description GoverningLaw */
  governingLaw: string;
  /** @description If specified, this header will set the language used when processing the request */
  gwLanguageHeader: string;
  /** @description If specified, this header will set the locale used when processing the request */
  gwLocaleHeader: string;
  /** @description If specified and the operation returns json with a defined schema, this will add a property, '$GW-Schema',  with the fully qualified name of the object's schema. */
  gwSchemaProperty: boolean;
  /** @description This header permits a customer to trace a request from its initial reception through all of the subsequent applications that were invoked to handle that request. The actual traceability id present in the MDC and logs (and returned in the response), is dependent on the implementation of TraceabilityIDPlugin. The default implementation uses this value, if specified, or a generated UID.  However, another implementation may always generate a unique id and just log  the relationship between these incoming values and the generated UID. Note: that this header can be repeated, but the resulting string will just be the comma separated values. */
  gwTraceability: string;
  /** @description If specified and this operation results in a database commit, this header's value must not have been submitted before.  This value must be globally unique across all clients, apis and webservices. It is used for those transaction that are not idempotent. Unless this is explicitly referenced for an operation it is not required. */
  gwTransactionID: string;
  /**
   * @description If specified, this header will drive the behavior for unknown property handling
   * @enum {string}
   */
  gwUnknownPropertyHeader: "log" | "reject" | "ignore";
  /**
   * @description If specified, this header will drive the behavior for unknown query parameter handling.  Default is to reject them.
   * @enum {string}
   */
  gwUnknownQueryParameterHeader: "log" | "reject" | "ignore";
  /** @description If specified, this header permits the client to override the behavior around validating response */
  gwValidateResponseHandling: boolean;
  /** @description Indicates whether or not metadata should be included in response */
  includeMeta: boolean;
  /** @description Query parameter to pass industry code domain */
  industryCodeDomain: string;
  /**
   * @description Flag to indicate fetching activities related to referral
   * @default false
   */
  isReferral: boolean;
  /** @description jobDate */
  jobDate: string;
  /** @description The identifier for the job */
  jobNumber: string;
  /** @description Identifies the type of job to be searched */
  jobType: string;
  /** @description Jurisdiction */
  jurisdiction: string;
  /** @description The identifier for the location */
  locationId: string;
  /** @description The identifier for the CP7Occupancy associated with CP7Building */
  occupancyClassId: string;
  /** @description operatingUnit */
  operatingUnit: string;
  /** @description The identifier for the owner officer */
  ownerOfficerId: string;
  /** @description The identifier for the CP7 Personal Property associated with CP7OccupancyClass */
  personalPropertyId: string;
  /** @description The identifier for the policyLocation associated with GL7Location */
  policyLocationId: string;
  /** @description The identifier for the job */
  priorPolicyId: string;
  /** @description Product offering utilized as criteria to retrieve class codes */
  productOffering: string;
  /** @description The identifier for the end date for comparison */
  searchDateIntervalEnd: string;
  /** @description The identifier for the start date for comparison */
  searchDateIntervalStart: string;
  /** @description The identifier for CP7 Special Class Business Income */
  specialClassBusinessIncomeId: string;
  /** @description The identifier for CP7 Special Class */
  specialClassId: string;
  /** @description The identifier for the state */
  state: string;
  /** @description Subline utilized as criteria to retrieve class codes */
  subline: string;
  /** @description The identifier for sync coverages */
  syncCoverages: boolean;
  /** @description The identifier for the underlying policy */
  underlyingPolicyId: string;
  /** @description The identifier for the vehicle */
  vehicleId: string;
  /** @description The type of the vehicle */
  vehicleType: string;
  /** @description Vehicle Identification Number */
  vin: string;
  /**
   * @description Flag to indicate whether or not quote should wait for docs before returning
   * @default true
   */
  withDocs: boolean;
}

export interface responses {
  /** 401 error that is returned if the request's user cannot be authenticated */
  AuthenticationError: {
    schema: definitions["ErrorInfo"];
  };
  /** 400 error that is returned if the input to this endpoint is not valid; this can happen because of missing required parameters, malformed json, json that does not validate against the declared schema, etc. */
  BadInput: {
    schema: definitions["ErrorInfo"];
  };
  /** 500 error that is returned if a server-side error prevented this request from being processed */
  InternalServerError: {
    schema: definitions["ErrorInfo"];
  };
  /** 406 error that is returned if the Accept header provided by the client does not match any types produced by this endpoint */
  NotAcceptable: {
    schema: definitions["ErrorInfo"];
  };
  /** 403 error that is returned if the authenticated user is not authorized to access a given resource */
  NotAuthorized: {
    schema: definitions["ErrorInfo"];
  };
  /** 404 error that is returned if the specified resource does not exist */
  NotFound: {
    schema: definitions["ErrorInfo"];
  };
  /** 405 error that is returned if the specified HTTP verb is not allowed on a given resource */
  OperationNotSupported: {
    schema: definitions["ErrorInfo"];
  };
  /** 503 error that is returned if the server's runlevel is not adequate to service this request */
  ServiceUnavailable: {
    schema: definitions["ErrorInfo"];
  };
  /** 415 error that is returned if the Content-Type of the request is not consumable by this endpoint */
  UnsupportedContentType: {
    schema: definitions["ErrorInfo"];
  };
}

export interface operations {
  /** Search jobs and get list of job */
  searchJobs: {
    parameters: {
      query: {
        /** Identifies the type of job to be searched */
        jobType: parameters["jobType"];
        /** The identifier for the start date for comparison */
        searchDateIntervalStart: parameters["searchDateIntervalStart"];
        /** The identifier for the end date for comparison */
        searchDateIntervalEnd: parameters["searchDateIntervalEnd"];
      };
    };
    responses: {
      /** Successfully retrieved job search results */
      200: {
        schema: definitions["JobSearchResponse"];
      };
    };
  };
  /** Mark a single Activity as complete */
  completeActivity: {
    parameters: {
      path: {
        /** The identifier for the activity */
        activityId: parameters["activityId"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: string;
      };
    };
  };
  /** Retrieve GL7 Governing Class Codes */
  retrieveGL7GoverningClassCodesByCriteria: {
    parameters: {
      query: {
        /** Product offering utilized as criteria to retrieve class codes */
        productOffering?: parameters["productOffering"];
        /** Subline utilized as criteria to retrieve class codes */
        subline?: parameters["subline"];
      };
    };
    responses: {
      /** Successfully retrieved governing class codes */
      200: {
        schema: definitions["GoverningClassCodeResponse"];
      };
    };
  };
  /** Return the Jurisdiction-level ClassCodes */
  retrieveWCMClassCodesNoJobNumber: {
    parameters: {
      query: {
        /** jobDate */
        jobDate: parameters["jobDate"];
        /** Jurisdiction */
        jurisdiction: parameters["jurisdiction"];
        /** GoverningLaw */
        governingLaw: parameters["governingLaw"];
        /** operatingUnit */
        operatingUnit?: parameters["operatingUnit"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ClassCodesResponse"];
      };
    };
  };
  /** Retrieve job */
  retrieveJob: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully retrieved the job */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Update job info */
  patchJobInfo: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["JobRequest"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Retrieve all activites */
  retrieveAllActivity: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Flag to indicate fetching activities related to referral */
        isReferral?: parameters["isReferral"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ActivitiesResponse"];
      };
    };
  };
  /** Create New Activity for provided jo/activitiesb number */
  createNewActivity: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Flag to indicate fetching activities related to referral */
        isReferral?: parameters["isReferral"];
      };
      body: {
        body: definitions["ActivityRequest"];
      };
    };
    responses: {
      /** Successfully created activity */
      200: {
        schema: definitions["ActivityResponse"];
      };
    };
  };
  /** Retrieve Single Activity */
  retrieveActivity: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the activity */
        activityId: parameters["activityId"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ActivityResponse"];
      };
    };
  };
  /** Bind a job */
  bindJob: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully bind the job */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Copy Submission */
  copySubmission: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CopySubmissionRequest"];
      };
    };
    responses: {
      /** Successfully did the copy submission on the job */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Decline job */
  declineJob: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Edit a job */
  draftJob: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully drafted the job */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Create a new exclude location */
  createExcludeLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["ExcludeLocationRequest"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ExcludeLocationResponse"];
      };
    };
  };
  /** Update list of exclude locations */
  patchExcludeLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["ExcludeLocationRequest"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ExcludeLocationResponse"];
      };
    };
  };
  /** Delete this Location from its schedule */
  deleteExcludeLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the location */
        locationId: parameters["locationId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["DeleteResponse"];
      };
    };
  };
  /** Issue a job */
  issueJob: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body?: definitions["IssueRequest"];
      };
    };
    responses: {
      /** Successfully issued the job */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Retrieve CA7 Line */
  retrieveCA7Line: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        schema: definitions["CA7LineResponse"];
      };
    };
  };
  /** Update a CA7 State Coverable */
  patchCA7StateCoverable: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CoverableRequest"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ProductResponse"];
      };
    };
  };
  /** Retrieve CA7 Coverage Symbol Groups */
  retrieveCA7CoverageSymbolGroups: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully retrieved CA7 Coverage Symbol Groups */
      200: {
        schema: definitions["CA7CoverageSymbolGroupsResponse"];
      };
    };
  };
  /** Update CA7 Coverage Symbol Groups */
  patchCA7CoverageSymbolGroups: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CA7CoverageSymbolGroupsRequest"];
      };
    };
    responses: {
      /** Successfully updated CA7 Coverage Symbol Groups */
      200: {
        schema: definitions["CA7CoverageSymbolGroupsResponse"];
      };
    };
  };
  /** Retrieve CA7 Drivers */
  retrieveCA7Drivers: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully retrieved CA7 Drivers */
      200: {
        schema: definitions["CA7DriversResponse"];
      };
    };
  };
  /** Create a CA7 Driver */
  createCA7Driver: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CA7DriverRequest"];
      };
    };
    responses: {
      /** Successfully created CA7 Driver */
      200: {
        schema: definitions["CA7DriverResponse"];
      };
    };
  };
  /** Retrieve CA7 Driver By Id */
  retrieveCA7DriverById: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the driver */
        driverId: parameters["driverId"];
      };
    };
    responses: {
      /** Successfully retrieved CA7 Driver By Id */
      200: {
        schema: definitions["CA7DriverResponse"];
      };
    };
  };
  /** Delete this CA7 Driver By Id */
  deleteCA7DriverById: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the driver */
        driverId: parameters["driverId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update a CA7 Driver */
  patchCA7Driver: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the driver */
        driverId: parameters["driverId"];
      };
      body: {
        body: definitions["CA7DriverRequest"];
      };
    };
    responses: {
      /** Successfully updated CA7 Driver */
      200: {
        schema: definitions["CA7DriverResponse"];
      };
    };
  };
  /** Retrieve CA7 Additional Interests */
  retrieveCA7AdditionalInterests: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully retrieved CA7 Additional Interests */
      200: {
        schema: definitions["CA7AdditionalInterestsResponse"];
      };
    };
  };
  /** Creates an additional interest on a vehicle */
  createCA7AdditionalInterests: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CA7AdditionalInterestRequest"];
      };
    };
    responses: {
      /** Successfully created additional interests for the provided vehicles */
      200: {
        schema: definitions["CA7AdditionalInterestsResponse"];
      };
    };
  };
  /** Deletes an additional interest by ID */
  deleteCA7AdditionalInterestById: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update CA7 Additional Interest */
  patchCA7AdditionalInterest: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
      body: {
        body: definitions["CA7AdditionalInterestRequest"];
      };
    };
    responses: {
      /** Successfully updated CA7 Additional Interest */
      200: {
        schema: definitions["CA7AdditionalInterestResponse"];
      };
    };
  };
  /** Retrieve CA7 Vehicles */
  retrieveCA7Vehicles: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Indicates whether or not metadata should be included in response */
        includeMeta?: parameters["includeMeta"];
      };
    };
    responses: {
      /** Successfully retrieved CA7 Vehicles */
      200: {
        schema: definitions["CA7VehiclesResponse"];
      };
    };
  };
  /** Create a CA7 Vehicle */
  createCA7Vehicle: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Indicates whether or not metadata should be included in response */
        includeMeta?: parameters["includeMeta"];
      };
      body: {
        body: definitions["CA7VehicleRequest"];
      };
    };
    responses: {
      /** Successfully created CA7 Vehicle */
      200: {
        schema: definitions["CA7VehicleResponse"];
      };
    };
  };
  /** Retrieve Vehicle Info by Vehicle Identification Number */
  vehicleIdentificationNumberLookup: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** Vehicle Identification Number */
        vin: parameters["vin"];
      };
    };
    responses: {
      /** Successfully Retrieved Vehicle Info by Vehicle Identification Number */
      200: {
        schema: definitions["VehicleIdentificationNumberResponse"];
      };
    };
  };
  /** Retrieve a CA7 Vehicle by Id */
  retrieveCA7Vehicle: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the vehicle */
        vehicleId: parameters["vehicleId"];
      };
      query: {
        /** The type of the vehicle */
        vehicleType: parameters["vehicleType"];
      };
    };
    responses: {
      /** Successfully retrieved CA7 Vehicle */
      200: {
        schema: definitions["CA7VehicleResponse"];
      };
    };
  };
  /** Delete CA7 Vehicle */
  deleteCA7Vehicle: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the vehicle */
        vehicleId: parameters["vehicleId"];
      };
      query: {
        /** The type of the vehicle */
        vehicleType: parameters["vehicleType"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update a CA7 Vehicle */
  patchCA7Vehicle: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the vehicle */
        vehicleId: parameters["vehicleId"];
      };
      query: {
        /** The type of the vehicle */
        vehicleType: parameters["vehicleType"];
      };
      body: {
        body: definitions["CA7VehicleRequest"];
      };
    };
    responses: {
      /** Successfully updated CA7 Vehicle */
      200: {
        schema: definitions["CA7VehicleResponse"];
      };
    };
  };
  /** Validate a vehicle entity */
  validateCA7Vehicle: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the vehicle */
        vehicleId: parameters["vehicleId"];
      };
      query: {
        /** The type of the vehicle */
        vehicleType: parameters["vehicleType"];
      };
    };
    responses: {
      /** Successfully validated vehicle */
      200: {
        schema: definitions["VehicleValidationResponse"];
      };
    };
  };
  /** Retrieve CP7 Details */
  retrieveCP7Details: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["CP7LineResponse"];
      };
    };
  };
  /** Update CP7 Details */
  updateCP7Details: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CP7LineRequest"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["CP7LineResponse"];
      };
    };
  };
  /** Retrieve all building additional interest */
  retrieveCP7BuildingsAdditionalInterests: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7AdditionalInterestsResponse"];
      };
    };
  };
  /** Add an additional interest to buildings coverage schedule items */
  addCP7BuildingsAdditionalInterest: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body?: definitions["CP7AdditionalInterestRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7AdditionalInterestsResponse"];
      };
    };
  };
  /** Remove Additional Interest */
  removeCP7BuildingAdditionalInterest: {
    parameters: {
      path: {
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Retrieve CP7 Buildings */
  retrieveCP7BuildingList: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BuildingsResponse"];
      };
    };
  };
  /** Retrieve CP7 Building based on BuildingId */
  retrieveCP7BuidlingData: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BuildingResponse"];
      };
    };
  };
  /** Retrieve CP7 Building Class Codes */
  retrieveCP7ClassCodeDescriptions: {
    parameters: {
      path: {
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
      query: {
        /** A governing class code */
        governingClassCode?: parameters["governingClassCode"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["CP7ClassCodeDescriptionsResponse"];
      };
    };
  };
  /** Retrieve CP7 Business Income */
  retrieveCP7BusinessIncomeList: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BusinessIncomesResponse"];
      };
    };
  };
  /** Retrieve CP7 Business Income based on BusinessIncomeId */
  retrieveCP7BusinessIncomeData: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7 Business Income associated with CP7Building */
        businessIncomeId: parameters["businessIncomeId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BusinessIncomeResponse"];
      };
    };
  };
  /** Retrieve a list of locations on a job */
  retrieveCP7Locations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["CP7PolicyLocationsResponse"];
      };
    };
  };
  /** Create a new cp7location on a job */
  createCP7Location: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CP7PolicyLocationRequest"];
      };
    };
    responses: {
      /** Successful creation */
      201: {
        schema: definitions["CP7PolicyLocationResponse"];
      };
    };
  };
  /** Update list of cp7location on a job */
  patchCP7PolicyLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["CP7PolicyLocationsRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PolicyLocationsResponse"];
      };
    };
  };
  /** Retrieve a CP7 location on a job */
  retrieveCP7Location: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["CP7PolicyLocationResponse"];
      };
    };
  };
  /** Delete this cp7location from its job */
  deleteCP7PolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update a cp7location on a job */
  patchCP7PolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
      body: {
        body: definitions["CP7PolicyLocationRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PolicyLocationResponse"];
      };
    };
  };
  /** Retrieve CP7 Buildings on a Location */
  retrieveCP7Buildings: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BuildingsResponse"];
      };
    };
  };
  /** Create CP7 Building on a Location */
  createCP7Building: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
      body: {
        body: definitions["CP7BuildingRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BuildingResponse"];
      };
    };
  };
  /** Patch CP7 Buildings on a Location */
  patchCP7Buildings: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
      body: {
        body: definitions["CP7BuildingsRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BuildingsResponse"];
      };
    };
  };
  /** Retrieve a CP7 Building on a Building ID */
  retrieveCP7Building: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BuildingResponse"];
      };
    };
  };
  /** Delete this CP7 Building from its Location */
  deleteCP7Building: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Patch CP7 Building on a Building ID */
  updateCP7Building: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
      body: {
        body: definitions["CP7BuildingRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BuildingResponse"];
      };
    };
  };
  /** Retrieve CP7 Business Income on a Building */
  retrieveCP7BusinessIncomes: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BusinessIncomesResponse"];
      };
    };
  };
  /** Create CP7 Business Income on a Building */
  createCP7BusinessIncome: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
      body: {
        body: definitions["CP7BusinessIncomeRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BusinessIncomesResponse"];
      };
    };
  };
  /** Patch CP7 Business Incomes on a Building */
  patchCP7BusinessIncome: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
      body: {
        body: definitions["CP7BusinessIncomesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BusinessIncomesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Business Income on a Building */
  retrieveCP7BusinessIncome: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7 Business Income associated with CP7Building */
        businessIncomeId: parameters["businessIncomeId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BusinessIncomeResponse"];
      };
    };
  };
  /** Delete this CP7 Business Income from Building */
  deleteCP7BusinessIncome: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7 Business Income associated with CP7Building */
        businessIncomeId: parameters["businessIncomeId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Patch CP7 Business Income on a Building */
  updateCP7BusinessIncome: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7 Business Income associated with CP7Building */
        businessIncomeId: parameters["businessIncomeId"];
      };
      body: {
        body: definitions["CP7BusinessIncomeRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7BusinessIncomeResponse"];
      };
    };
  };
  /** Retrieve CP7 OccupancyClass on a Building */
  retrieveCP7OccupancyClasses: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassesResponse"];
      };
    };
  };
  /** Create CP7 OccupancyClass on a Building */
  createCP7OccupancyClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
      body: {
        body: definitions["CP7OccupancyClassRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassResponse"];
      };
    };
  };
  /** Patch CP7 Occupancy Classes on a Building */
  patchCP7OccupancyClasses: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
      };
      body: {
        body: definitions["CP7OccupancyClassesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Building on a Building ID */
  retrieveCP7OccupancyClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassResponse"];
      };
    };
  };
  /** Delete this CP7 Occupancy Class from its Building */
  deleteCP7OccupancyClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Patch CP7 Occupancy on a Building ID */
  updateCP7OccupancyClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
      body: {
        body: definitions["CP7OccupancyClassRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassResponse"];
      };
    };
  };
  /** Retrieve CP7 Personal Property on a Occupancy */
  retrieveCP7PersonalProperties: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PersonalPropertiesResponse"];
      };
    };
  };
  /** Create CP7 Personal Property on a Occupancy */
  createCP7PersonalProperty: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
      body: {
        body: definitions["CP7PersonalPropertyRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PersonalPropertyResponse"];
      };
    };
  };
  /** Patch CP7 Personal Property on a Occupancy */
  patchCP7PersonalProperties: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
      body: {
        body: definitions["CP7PersonalPropertiesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PersonalPropertiesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Personal Property on a Occupancy */
  retrieveCP7PersonalProperty: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
        /** The identifier for the CP7 Personal Property associated with CP7OccupancyClass */
        personalPropertyId: parameters["personalPropertyId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PersonalPropertyResponse"];
      };
    };
  };
  /** Delete this CP7 Personal Property on a Occupancy */
  deleteCP7PersonalProperty: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
        /** The identifier for the CP7 Personal Property associated with CP7OccupancyClass */
        personalPropertyId: parameters["personalPropertyId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Patch CP7 Personal Property on a Occupancy */
  updateCP7PersonalProperty: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for the CP7Building associated with CP7Location */
        buildingId: parameters["buildingId"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
        /** The identifier for the CP7 Personal Property associated with CP7OccupancyClass */
        personalPropertyId: parameters["personalPropertyId"];
      };
      body: {
        body: definitions["CP7PersonalPropertyRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PersonalPropertyResponse"];
      };
    };
  };
  /** Retrieve CP7 Special Classes on a Location */
  retrieveCP7SpecialClasses: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassesResponse"];
      };
    };
  };
  /** Create CP7 Special Class on a Location */
  createCP7SpecialClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
      body: {
        body: definitions["CP7SpecialClassRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassResponse"];
      };
    };
  };
  /** Patch CP7 Special Classes on a Location */
  patchCP7SpecialClasses: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
      };
      body: {
        body: definitions["CP7SpecialClassesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Special Class with a Special Class ID */
  retrieveCP7SpecialClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassResponse"];
      };
    };
  };
  /** Delete this CP7 Special Class from its Location */
  deleteCP7SpecialClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Patch CP7 Special Class with a Special Class Id */
  patchCP7SpecialClass: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
      body: {
        body: definitions["CP7SpecialClassRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassResponse"];
      };
    };
  };
  /** Retrieve Special Class Business Incomes on a Special Class */
  retrieveCP7SpecialClassBIs: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassBusinessIncomesResponse"];
      };
    };
  };
  /** Create CP7 Special Class Business Incomes on a Special Class */
  createCP7SpecialClassBI: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
      body: {
        body: definitions["CP7SpecialClassBusinessIncomeRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassBusinessIncomeResponse"];
      };
    };
  };
  /** Patch CP7 Special Class Business Income on a Special Class */
  patchCP7SpecialClassBIs: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
      body: {
        body: definitions["CP7SpecialClassBusinessIncomesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassBusinessIncomesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Special Class with a SpecialClassBusinessIncomeID */
  retrieveCP7SpecialClassBI: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
        /** The identifier for CP7 Special Class Business Income */
        specialClassBusinessIncomeId: parameters["specialClassBusinessIncomeId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassBusinessIncomeResponse"];
      };
    };
  };
  /** Delete this CP7 Special Class Business Income from its Special Class */
  deleteCP7SpecialClassBI: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
        /** The identifier for CP7 Special Class Business Income */
        specialClassBusinessIncomeId: parameters["specialClassBusinessIncomeId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Patch CP7 Special Class Business Income with a SpecialClassBusinessIncomeId */
  patchCP7SpecialClassBI: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Location */
        cp7LocationId: parameters["cp7LocationId"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
        /** The identifier for CP7 Special Class Business Income */
        specialClassBusinessIncomeId: parameters["specialClassBusinessIncomeId"];
      };
      body: {
        body: definitions["CP7SpecialClassBusinessIncomeRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassBusinessIncomeResponse"];
      };
    };
  };
  /** Retrieve CP7 OccupancyClasses */
  retrieveCP7OccupancyClassList: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassesResponse"];
      };
    };
  };
  /** Retrieve CP7 OccupancyClass based on OccupancyClassId */
  retrieveCP7OccupancyClassData: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassResponse"];
      };
    };
  };
  /** Retrieve CP7 OccupancyClass Class Codes */
  retrieveCP7OccupancyClassCodeDescriptions: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7Occupancy associated with CP7Building */
        occupancyClassId: parameters["occupancyClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7OccupancyClassCodeDescriptionsResponse"];
      };
    };
  };
  /** Retrieve CP7 Personal Properties */
  retrieveCP7PersonalPropertyList: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PersonalPropertiesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Personal Property based on PersonalPropertyId */
  retrieveCP7PersonalPropertyData: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the CP7 Personal Property associated with CP7OccupancyClass */
        personalPropertyId: parameters["personalPropertyId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7PersonalPropertyResponse"];
      };
    };
  };
  /** Retrieve CP7 Governing Class Codes */
  retrieveCP7GoverningClassCodes: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GoverningClassCodeResponse"];
      };
    };
  };
  /** Retrieve Special Class Business Incomes */
  retrieveCP7SpecialClassBIList: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassBusinessIncomesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Special Class with a SpecialClassBusinessIncomeID */
  retrieveCP7SpecialClassBIData: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for CP7 Special Class Business Income */
        specialClassBusinessIncomeId: parameters["specialClassBusinessIncomeId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassBusinessIncomeResponse"];
      };
    };
  };
  /** Retrieve CP7 Special Classes */
  retrieveCP7SpecialClassList: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassesResponse"];
      };
    };
  };
  /** Retrieve a CP7 Special Class with a Special Class ID */
  retrieveCP7SpecialClassData: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["CP7SpecialClassResponse"];
      };
    };
  };
  /** Retrieve CP7 Special Class Class Codes */
  retrieveCP7SpecialClassCodeDescriptions: {
    parameters: {
      path: {
        /** The identifier for CP7 Special Class */
        specialClassId: parameters["specialClassId"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["CP7SpecialClassCodeDescriptionsResponse"];
      };
    };
  };
  /** Retrieve GL7 Line */
  retrieveGL7Line: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7LineResponse"];
      };
    };
  };
  /** Update GL7 Line */
  updateGL7Line: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["GL7LineRequest"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7LineResponse"];
      };
    };
  };
  /** Retrieve GL7 Exposures Details */
  retrieveGL7Exposures: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7ExposuresResponse"];
      };
    };
  };
  /** Create a new gl7Exposure on a job */
  createGL7Exposure: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["GL7ExposureRequest"];
      };
    };
    responses: {
      /** Successful creation */
      201: {
        schema: definitions["GL7ExposureResponse"];
      };
    };
  };
  /** Update list of gl7Exposues on a job */
  patchGL7Exposures: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["GL7ExposuresRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["GL7ExposuresResponse"];
      };
    };
  };
  /** Retrieve GL7 Exposures Details */
  retrieveGL7Exposure: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the expousre associated with GL7Location */
        exposureId: parameters["exposureId"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7ExposureResponse"];
      };
    };
  };
  /** Delete this gl7exposure from its job */
  deleteGL7Exposure: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the expousre associated with GL7Location */
        exposureId: parameters["exposureId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update Sub-line Details */
  patchGL7Exposure: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the expousre associated with GL7Location */
        exposureId: parameters["exposureId"];
      };
      body: {
        body: definitions["GL7ExposureRequest"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7ExposureResponse"];
      };
    };
  };
  /** Retrieve a single GL7 Exposure by id with Metadata */
  retrieveGL7ExposureMetadata: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the expousre associated with GL7Location */
        exposureId: parameters["exposureId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Retrieve a list of locations on a job */
  retrieveGL7Locations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["GL7PolicyLocationsResponse"];
      };
    };
  };
  /** Create a new gl7location on a job */
  createGL7Location: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["GL7PolicyLocationRequest"];
      };
    };
    responses: {
      /** Successful creation */
      201: {
        schema: definitions["GL7PolicyLocationResponse"];
      };
    };
  };
  /** Update list of gl7location on a job */
  patchGL7PolicyLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["GL7PolicyLocationsRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["GL7PolicyLocationsResponse"];
      };
    };
  };
  /** Retrieve a list of GL7 location on a job */
  retrieveGL7Location: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        gl7LocationId: parameters["gl7LocationId"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["GL7PolicyLocationResponse"];
      };
    };
  };
  /** Delete this gl7location from its job */
  deleteGL7PolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        gl7LocationId: parameters["gl7LocationId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update a gl7location on a job */
  patchGL7PolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        gl7LocationId: parameters["gl7LocationId"];
      };
      body: {
        body: definitions["GL7PolicyLocationRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["GL7PolicyLocationResponse"];
      };
    };
  };
  /** Retrieve a list of GL7 location on a job */
  retrieveGL7LocationMetadata: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        gl7LocationId: parameters["gl7LocationId"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["GL7PolicyLocationResponse"];
      };
    };
  };
  /** Return the exposure-level ClassCodes */
  getClassCodes: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ClassCodesResponse"];
      };
    };
  };
  /** Retrieve GL7 Governing Class Codes */
  retrieveGL7GoverningClassCodes: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully retrieved governing class codes */
      200: {
        schema: definitions["GoverningClassCodeResponse"];
      };
    };
  };
  /** Retrieve Sub-line Selection */
  retrieveSubLineSelection: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["SublineSelectionResponse"];
      };
    };
  };
  /** Update Sub-line Selection */
  updateSubLineSelection: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["SublineSelectionRequest"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["SublineSelectionResponse"];
      };
    };
  };
  /** Retrieve GL7 Subline Details */
  getGL7SubLineDetails: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7SublineTypesResponse"];
      };
    };
  };
  /** Update a gl7SubLineDetails on a job */
  updateGL7SubLineDetails: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["GL7SublineTypesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["GL7SublineTypesResponse"];
      };
    };
  };
  /** Retrieve Sub-line Details */
  retrieveSublines: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7SublinesReponse"];
      };
    };
  };
  /** Update Sub-line Details */
  updateSublines: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["GL7SublinesRequest"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["GL7SublinesReponse"];
      };
    };
  };
  /** Return the WCM Line Details */
  getWCMLineDetails: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["WCMLineResponse"];
      };
    };
  };
  /** Update a list of answers to the questions on a job */
  patchWCMLineDetails: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["WCMLineRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["WCMLineResponse"];
      };
    };
  };
  /** Retrieve a list of locations on a job */
  retrieveWCMLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** The identifier for sync coverages */
        syncCoverages?: parameters["syncCoverages"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["WCMLocationsResponse"];
      };
    };
  };
  /** Create a new location on a job */
  createWCMLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** The identifier for sync coverages */
        syncCoverages?: parameters["syncCoverages"];
      };
      body: {
        body: definitions["WCMLocationsRequest"];
      };
    };
    responses: {
      /** Successful creation */
      201: {
        schema: definitions["WCMLocationsResponse"];
      };
    };
  };
  /** Delete list of location on a job */
  deleteWCMLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** The identifier for sync coverages */
        syncCoverages?: parameters["syncCoverages"];
      };
      body: {
        body: definitions["WCMLocationsRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["WCMLocationsResponse"];
      };
    };
  };
  /** Update list of location on a job */
  patchWCMLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** The identifier for sync coverages */
        syncCoverages?: parameters["syncCoverages"];
      };
      body: {
        body: definitions["WCMLocationsRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["WCMLocationsResponse"];
      };
    };
  };
  /** Delete this location from its job */
  deleteWCMPolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the location */
        locationId: parameters["locationId"];
      };
    };
    responses: {
      /** Success */
      204: {
        schema: definitions["location_PolicyLocationResponse"];
      };
    };
  };
  /** Update a location on a job */
  patchWCMPolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the location */
        locationId: parameters["locationId"];
      };
      body: {
        body: definitions["location_PolicyLocationRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["location_PolicyLocationResponse"];
      };
    };
  };
  /** Retrieve All Jurisdiction Coverages */
  getAllJurisdictions: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["JurisdictionRequestResponse"];
      };
    };
  };
  /** Retrieve coverages based on state */
  getJurisdiction: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the state */
        state: parameters["state"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["CoverageResponse"];
      };
    };
  };
  /** Retrieve Owner Officers */
  retrieveOwnerOfficers: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["OwnerOfficersResponse"];
      };
    };
  };
  /** Create Owner Officer for provided job number */
  createOwnerOfficer: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["OwnerOfficerRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["OwnerOfficerResponse"];
      };
    };
  };
  /** Update Owner Officers for provided job number */
  patchOwnerOfficers: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["OwnerOfficersRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["OwnerOfficersResponse"];
      };
    };
  };
  /** Delete this owner officer from its job */
  deleteOwnerOfficer: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the owner officer */
        ownerOfficerId: parameters["ownerOfficerId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update Owner Officer for provided job number */
  patchOwnerOfficer: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the owner officer */
        ownerOfficerId: parameters["ownerOfficerId"];
      };
      body: {
        body: definitions["OwnerOfficerRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["OwnerOfficerResponse"];
      };
    };
  };
  /** Return the Jurisdiction-level ClassCodes */
  retrieveWCMClassCodes: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Jurisdiction */
        jurisdiction: parameters["jurisdiction"];
        /** GoverningLaw */
        governingLaw: parameters["governingLaw"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["ClassCodesResponse"];
      };
    };
  };
  /** Return all the limts */
  getLineCoverageLimits: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["LimitCodesResponse"];
      };
    };
  };
  /** Sync all coverages */
  syncProductModel: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: string;
      };
    };
  };
  /** Get all underlying policies */
  getUnderlyingPolicies: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["UnderlyingPoliciesResponse"];
      };
    };
  };
  /** Add underlying policy to WCULine */
  validateAndAddUnderlyingPolicy: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["UnderlyingPolicyRequest"];
      };
    };
    responses: {
      /** Successfully retrieved the underlying policy */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Remove underlying policy from WCULine */
  removeUnderlyingPolicy: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the underlying policy */
        underlyingPolicyId: parameters["underlyingPolicyId"];
      };
    };
    responses: {
      /** Successfully removed */
      200: {
        schema: string;
      };
    };
  };
  /** Retrieve WIM Line */
  retrieveWIMLine: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["WIMLineResponse"];
      };
    };
  };
  /** Update WIM Line */
  updateWIMLine: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["WIMLineRequest"];
      };
    };
    responses: {
      /** Successfully updated */
      200: {
        schema: definitions["WIMLineResponse"];
      };
    };
  };
  /** Retrieve WIM Coverage Parts */
  retrieveCoverageParts: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully retrieve coverage part selections */
      200: {
        schema: definitions["WIMCoveragePartsResponse"];
      };
    };
  };
  /** Create WIM Coverage Part on WIM Line */
  createCoveragePart: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["WIMCoveragePartRequest"];
      };
    };
    responses: {
      /** Successfully created coverage part */
      201: {
        schema: definitions["WIMCoveragePartResponse"];
      };
    };
  };
  /** Retrieve WIM Coverage Part by ID */
  retrieveCoveragePart: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
      };
    };
    responses: {
      /** Successfully retrieve coverage part selections */
      200: {
        schema: definitions["WIMCoveragePartResponse"];
      };
    };
  };
  /** Delete WIM Coverage Part by ID */
  deleteCoveragePart: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Retrieve WIM Scheduled Equipments by Coverage Part ID */
  retrieveScheduledEquipments: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
      };
    };
    responses: {
      /** Successfully retrieved scheduled equipments */
      200: {
        schema: definitions["WIMScheduledEquipmentsResponse"];
      };
    };
  };
  /** This endpoint facilitates creating new scheduled equipments to an existing coverage part */
  createScheduledEquipment: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
      };
      body: {
        body: definitions["WIMScheduledEquipmentRequest"];
      };
    };
    responses: {
      /** Successfully created scheduled equipment */
      200: {
        schema: definitions["WIMScheduledEquipmentsResponse"];
      };
    };
  };
  /** Retrieve WIM Scheduled Equipments by Equipment ID */
  retrieveScheduledEquipment: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
      };
    };
    responses: {
      /** Successfully retrieved scheduled equipment */
      200: {
        schema: definitions["WIMScheduledEquipmentResponse"];
      };
    };
  };
  /** Delete WIM Scheduled Equipment */
  deleteScheduledEquipment: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
      };
    };
    responses: {
      /** Successfully deleted scheduled equipment */
      200: {
        schema: string;
      };
    };
  };
  /** Update a WIM Scheduled Equipment on coverage part */
  patchScheduledEquipment: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
      };
      body: {
        body: definitions["WIMScheduledEquipmentRequest"];
      };
    };
    responses: {
      /** Successfully updated scheduled equipment */
      200: {
        schema: definitions["WIMScheduledEquipmentResponse"];
      };
    };
  };
  /** Retrieve WIM Additional Interest Details for Scheduled Equipment */
  retrieveAdditionalInterests: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
      };
    };
    responses: {
      /** Successfully retrieved additional interests */
      200: {
        schema: definitions["WIMAdditionalInterestsResponse"];
      };
    };
  };
  /** This endpoint facilitates creating new additional interests to an existing scheduled equipment */
  createAdditionalInterest: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
      };
      body: {
        body: definitions["WIMAdditionalInterestRequest"];
      };
    };
    responses: {
      /** Successfully created additional interest */
      200: {
        schema: definitions["WIMAdditionalInterestResponse"];
      };
    };
  };
  /** Retrieve WIM Additional Interest Detail for Scheduled Equipment by ID */
  retrieveAdditionalInterest: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
    };
    responses: {
      /** Successfully retrieved additional interests */
      200: {
        schema: definitions["WIMAdditionalInterestResponse"];
      };
    };
  };
  /** Delete WIM Additional Interest Detail */
  deleteAdditionalInterest: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
    };
    responses: {
      /** Successfully deleted additional interest */
      200: {
        schema: string;
      };
    };
  };
  /** Update WIM Additional Interest Detail */
  patchAdditionalInterest: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the coverage part */
        coveragePartId: parameters["coveragePartId"];
        /** The identifier for the scheduled equipment */
        equipmentId: parameters["equipmentId"];
        /** The identifier for the additional interest detail */
        additionalInterestId: parameters["additionalInterestId"];
      };
      body: {
        body: definitions["WIMAdditionalInterestRequest"];
      };
    };
    responses: {
      /** Succesfully updated additional interest */
      200: {
        schema: definitions["WIMAdditionalInterestResponse"];
      };
    };
  };
  /** Get Policy Locations from its job */
  retrievePolicyLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["RetrievePolicyLocationsResponse"];
      };
    };
  };
  /** Create Policy Location for provided job number */
  createPolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["PolicyLocationRequest"];
      };
    };
    responses: {
      /** Success */
      201: {
        schema: definitions["PolicyLocationResponse"];
      };
    };
  };
  /** Update Prior Policy for provided job number */
  patchPolicyLocations: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["PolicyLocationsRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["RetrievePolicyLocationsResponse"];
      };
    };
  };
  /** Get Policy Locations from its job */
  retrievePolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        policyLocationId: parameters["policyLocationId"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["PolicyLocationResponse"];
      };
    };
  };
  /** Delete this Policy Location from its job */
  deletePolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        policyLocationId: parameters["policyLocationId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update Policy Location for provided job number */
  patchPolicyLocation: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the policyLocation associated with GL7Location */
        policyLocationId: parameters["policyLocationId"];
      };
      body: {
        body: definitions["PolicyLocationRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["PolicyLocationResponse"];
      };
    };
  };
  /** Retrieve payment plans for the job */
  retrievePaymentPlans: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["PaymentPlanResponse"];
      };
    };
  };
  /** Add/Update Payment Plan for provided job number */
  patchPaymentPlan: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["SetPaymentPlanRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["SetPaymentPlanResponse"];
      };
    };
  };
  /** Get  priorpolicy from its job */
  retrievePriorPolicies: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        schema: definitions["PriorPoliciesResponse"];
      };
    };
  };
  /** Create Prior Policy for provided job number */
  createPriorPolicy: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["PriorPolicyRequest"];
      };
    };
    responses: {
      /** Success */
      201: {
        schema: definitions["PriorPolicyResponse"];
      };
    };
  };
  /** Update Prior Policy for provided job number */
  patchPriorPolicies: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      body: {
        body: definitions["PriorPoliciesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["PriorPoliciesResponse"];
      };
    };
  };
  /** Delete this priorpolicy from its job */
  deletePriorPolicy: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the job */
        priorPolicyId: parameters["priorPolicyId"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: string;
      };
    };
  };
  /** Update Prior Policy for provided job number */
  patchPriorPolicy: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
        /** The identifier for the job */
        priorPolicyId: parameters["priorPolicyId"];
      };
      body: {
        body: definitions["PriorPolicyRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["PriorPolicyResponse"];
      };
    };
  };
  /** Retrieve carriers */
  retrievePriorPolicyCarriers: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["TypeListResponse"];
      };
    };
  };
  /** Quote a job */
  quoteJob: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Flag to indicate whether or not quote should wait for docs before returning */
        withDocs?: parameters["withDocs"];
      };
      body: {
        body?: definitions["EarlyQuote"];
      };
    };
    responses: {
      /** Successfully quoted the job */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Rate a job */
  rateJob: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Successfully rated the job */
      200: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Retrieve a list of industry codes */
  retrieveIndustryCodes: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
      query: {
        /** Query parameter to pass industry code domain */
        industryCodeDomain?: parameters["industryCodeDomain"];
      };
    };
    responses: {
      /** Successfully retrieved the industry codes */
      200: {
        schema: definitions["IndustryCodeResponse"];
      };
    };
  };
  /** Retrieve policy symbols for the job */
  retrievePolicySymbols: {
    parameters: {
      path: {
        /** The identifier for the job */
        jobNumber: parameters["jobNumber"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["PolicySymbolsResponse"];
      };
    };
  };
  /** Create a new draft submission */
  createSubmission: {
    parameters: {
      body: {
        body: definitions["JobRequest"];
      };
    };
    responses: {
      /** Successful creation */
      201: {
        schema: definitions["JobResponse"];
      };
    };
  };
  /** Returns a Swagger 2.0 schema for this API as json */
  generateDocs: {
    responses: {
      /** Successful operation */
      200: unknown;
    };
  };
}

export interface external {}
